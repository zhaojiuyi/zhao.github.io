<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue2全家桶</title>
      <link href="/2022/08/06/vue%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
      <url>/2022/08/06/vue%E5%85%A8%E5%AE%B6%E6%A1%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>vue全家桶</code>指的是我们在使用vue框架开发一个完整的中大型单页面应用项目时所必须的插件或框架，其主要包括：</p><p><strong>vue-cli:</strong>VueCLI是官方提供的一个脚手架，能够快速搭建起一个单页面应用</p><p><strong>vue-router:</strong>Vue Router 是 <a href="http://v3.vuejs.org/">Vue.js</a> 的官方路由。它与 Vue.js 核心深度集成，让用 Vue.js 构建单页应用变得轻而易举</p><p><strong>vuex:</strong>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p><strong>axios:</strong>Axios 是一个基于 <em><a href="https://javascript.info/promise-basics">promise</a></em> 网络请求库，作用于<a href="https://nodejs.org/"><code>node.js</code></a> 和浏览器中</p><p>除了上面提到的vue配套框架，本文还会介绍如何在vue项目中使用ElementUI（一个前端组件库）和sass（css预处理器）</p><h2 id="一、项目搭建"><a href="#一、项目搭建" class="headerlink" title="一、项目搭建"></a>一、项目搭建</h2><p>首先使用npm全局安装<code>vue-cli</code></p><pre class="language-none"><code class="language-none">npm install -g vue-cli &#x2F;&#x2F;此方法安装的是2.x版本npm install -g @vue&#x2F;cli 此方法安装的是最新版</code></pre><p>安装完成后在控制台下输入 <code>vue</code>命令，如图所示说明安装成功</p><p><img src="/vue%E5%85%A8%E5%AE%B6%E6%A1%B6/image-20220806170220143.png" alt="image-20220806170220143"></p><p>接下来使用脚手架创建项目</p><p>控制台中输入 <code>vue init webpack your-project-name</code></p><p>webpack是一个项目打包工具，方便我们对进行项目打包部署，your-project-name为项目名称</p><p>接下来就跟着提示确认自己的项目名称、项目简介、作者等信息</p><p><img src="/vue%E5%85%A8%E5%AE%B6%E6%A1%B6/image-20220808091314604.png" alt="image-20220808091314604"></p><p>在构建选项这里，提供了两种模式，<code>Runtime+Compiler </code>（运行程序+编译器：推荐给大多数用户）和<code> Runtime-only</code>（仅运行程序: 比上面那种模式轻大约 6KB，但是 template (或任何特定于vue的html)只允许在.vue文件中使用——其他地方用需要 render 函数）</p><p>两者的区别主要就是<code> Runtime-only</code>模式只能在<code>.vue</code>文件中使用<code>template</code>但是速度更快</p><p>这里我选择的是<code> Runtime+Compiler</code></p><p>接下来选项就是添加路由，使用ESLint规范代码，加入单元测试以及包管理工具等。</p><p>vue-router是构建单页面应用的关键，所以我们得选上，然后可以使用ESLint检查代码，提升代码质量，后面的unit、e2e可以不用，然后包管理工具使用npm。</p><p>回车等待项目创建完毕</p><p><img src="/vue%E5%85%A8%E5%AE%B6%E6%A1%B6/image-20220808093227455.png" alt="image-20220808093227455"></p><p>如图表示项目创建成功了，根据提示输入命令，进入项目目录，运行项目。</p><p><img src="/vue%E5%85%A8%E5%AE%B6%E6%A1%B6/image-20220808094530764.png" alt="image-20220808094530764"></p><p>如图所示运行成功！！！</p><p>打开项目文件夹，查看目录结构</p><pre class="language-none"><code class="language-none">├── build --------------------------------- 项目构建的相关配置文件，配置参数├── config ---------------------------------- 配置目录，包括IP、端口等。├── node_modules ---------------------------- npm 加载的项目依赖模块├── src ------------------------------------- 开发的根目录。│   ├── assets ------------------------------ 静态文件夹，放置一些图片、logo，css、js文件等│   ├── components -------------------------- 组件目录，存放组件文件。│   ├── main.js ----------------------------- 项目js文件，vue实例就是在这里面创建的。│   ├── App.vue ----------------------------- 项目入口组件，所有的页面都在这个组件进行渲染。│   ├── router ------------------------------ 路由├── static ---------------------------- 静态资源目录，如图片、字体等。├── index.html ------------------------------ 首页入口文件，用于vue实例的挂载。├── package.json ---------------------------- 项目依赖文件。 ├──  .README.md------------------------------- 项目的说明文档，markdown 格式</code></pre><h2 id="二、单文件组件"><a href="#二、单文件组件" class="headerlink" title="二、单文件组件"></a>二、单文件组件</h2><p>在使用脚手架搭建的vue项目中，我们通常使用<code>.vue</code>后缀的单文件组件，使得组件开发更加便捷</p><p>一个单文件组件可被分为<code>template</code>、<code>script</code>、<code>style</code>三部分</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;title-white&quot;&gt;    hello world!  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &#39;HelloWorld&#39;,&#125;&lt;&#x2F;script&gt;&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre><p><code>template</code>里面用来写我们熟悉的html标签</p><p><code>script</code>则是js代码，与组件相关的代码都写在这里，使用export抛出。</p><p><code>style</code>就是css样式，这里的scoped关键字是为了防止类名重复导致组件样式污染。</p><p>我们同样可以在单文件组件中使用数据和方法，计算属性，监听器，组件生命周期等，这些内容可以在另一篇博客中看到<a href='https://blog.zhaojiuyi.top/2022/05/28/Vue%E5%85%A5%E9%97%A8/#toc-heading-6'>vue入门</a>。</p><p>关于单文件组件中一些常见用法</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;div class&#x3D;&quot;title-white&quot;&gt;      &#123;&#123; title &#125;&#125; &lt;!--模板语法，使用data返回的数据--&gt;    &lt;&#x2F;div&gt;    &lt;!--  使用注册的组件  --&gt;    &lt;login&gt;&lt;&#x2F;login&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import login from &#39;.&#x2F;login&#39; &#x2F;&#x2F; 导入组件export default &#123;  name: &#39;HelloWorld&#39;,  components: &#123;login&#125;, &#x2F;&#x2F;组件局部注册，注册后可在当前组件使用  props: &#123;&#125;,&#x2F;&#x2F; 接受父组件传递的参数  data() &#123; &#x2F;&#x2F;组件数据    return &#123;      title: &#39;Hello World&#39;,    &#125;  &#125;,  methods: &#123; &#x2F;&#x2F;定义组件方法，可以在生命周期或模板中调用    functionName() &#123;&#125;  &#125;,  computed:&#123;&#125;, &#x2F;&#x2F;计算属性  watch:&#123;&#125;, &#x2F;&#x2F;监听器  mounted() &#123;&#125;, &#x2F;&#x2F;生命周期 --- 组件挂载完成  beforeDestroy() &#123;&#125; &#x2F;&#x2F;生命周期 --- 组件销毁之前&#125;&lt;&#x2F;script&gt;</code></pre><h2 id="三、vue-router页面路由"><a href="#三、vue-router页面路由" class="headerlink" title="三、vue-router页面路由"></a>三、vue-router页面路由</h2><p>Vue Router 是 <a href="http://v3.vuejs.org/">Vue.js</a> 的官方路由。它与 Vue.js 核心深度集成，让用 Vue.js 构建单页应用变得轻而易举。功能包括：</p><ul><li>嵌套路由映射</li><li>动态路由选择</li><li>模块化、基于组件的路由配置</li><li>路由参数、查询、通配符</li><li>展示由 Vue.js 的过渡系统提供的过渡效果</li><li>细致的导航控制</li><li>自动激活 CSS 类的链接</li><li>HTML5 history 模式或 hash 模式</li><li>可定制的滚动行为</li><li>URL 的正确编码</li></ul><p>由于我们在搭建项目的时候已经选择了使用vue-router，所以现在就不用再次下载安装了，可以打开项目目录下的<code>package.json</code>查看。</p><p><a href="https://router.vuejs.org/zh/introduction.html"> vue-router官方文档</a> </p><p>其实在项目搭建的时候我们已经开始使用了<code>vue-router</code>，打开<code>src/App.vue</code>，可以看到一个类似的结构。</p><p><img src="/vue%E5%85%A8%E5%AE%B6%E6%A1%B6/image-20220808104720389.png" alt="image-20220808104720389"></p><p>其中的<code>router-view</code>标签则是由vue-router提供，在这里我们创建了一个<code>App.vue</code>组件，并在其中使用了<code>router-view</code>标签，然后打开main.js</p><p><img src="/vue%E5%85%A8%E5%AE%B6%E6%A1%B6/image-20220808105052362.png" alt="image-20220808105052362"></p><p>可以看到，在main.js中导入了App组件，并将它作为模板挂载到Vue实例中，另外，src目录下还有一个router文件夹，打开里面的<code>index.js</code>文件，这个文件则是负责配置我们的页面路由。</p><p><img src="/vue%E5%85%A8%E5%AE%B6%E6%A1%B6/image-20220808105358954.png" alt="image-20220808105358954"></p><p>在<code>/</code>路径下我们注册了一个名为HelloWorld的组件，这意味着，当浏览器路径为根路径时，HelloWorld这个组件就会被渲染，展示在页面中。</p><p>值得注意的是，我们通常把一个页面拆分成多个组件，所以在通过路由渲染组件时，我们应该把组件渲染在那个位置？<code>router-view</code>标签就帮我们做了这样一件事情，它会负责将匹配到的路由渲染到<code>router-view</code>标签所在的位置。</p><p>整理一下逻辑，我们先以用App.vue为模板创建了一个vue实例，接下来所有的组件都将在这个实例中进行渲染，然后为根路径配置了一个组件，在这个模板中，我们使用了<code>router-view</code>标签渲染路径匹配到的组件，项目运行时，首先打开根目录，此时匹配到了HelloWorld这个组件，所以该组件就被<code>router-view</code>渲染出来了。</p><p><strong>常用配置</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 页面跳转逻辑</span><span class="token keyword">let</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token comment">//路由地址</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token comment">// 路由名称</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> Index<span class="token punctuation">,</span> <span class="token comment">// 渲染组件 这里的组件需要提前import</span>    <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">requiresAuth</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">//验证</span>    <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">'/file'</span><span class="token punctuation">,</span> <span class="token comment">// 重定向，当匹配到 / 路由时，会重定向到 子路由中的 /file</span>    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/file'</span><span class="token punctuation">,</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'文件'</span><span class="token punctuation">,</span>        <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">'my-cloud_disk-file'</span><span class="token punctuation">,</span>        <span class="token comment">// 这里是一个路由懒加载，也就是说，只有在跳转到该路由时，才会导入该组件</span>        <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/public/file'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/photo'</span><span class="token punctuation">,</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'相册'</span><span class="token punctuation">,</span>        <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">'my-cloud_disk-photo'</span><span class="token punctuation">,</span>        <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/public/photo'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token function-variable function">beforeEnter</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//独享路由守卫，实现跳转到index界面动画</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> login  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 将匹配所有内容并将其放在 `$route.params.pathMatch` 下，404</span>  <span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/:pathMatch(.*)*'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'NotFound'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> NotFound<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p><strong>路由守卫</strong></p><p>上面的例子中提到了局部的路由守卫，下面是全局路由守卫</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 全局路由守卫,实现前端登录拦截</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">//判断是否存在token，不存在则跳转登录</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>token<span class="token operator">?</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/login"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>路由默认使用hash模式。如果觉得<code>#</code>不好看，可以切换为history模式，编辑router&#x2F;index.js</p><p>修改代码</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  <span class="token comment">// 添加mode属性</span>  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> HelloWorld    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="四、vuex状态管理"><a href="#四、vuex状态管理" class="headerlink" title="四、vuex状态管理"></a>四、vuex状态管理</h2><h2 id="五、axios封装与使用"><a href="#五、axios封装与使用" class="headerlink" title="五、axios封装与使用"></a>五、axios封装与使用</h2><h2 id="六、ElementUI组件库的使用"><a href="#六、ElementUI组件库的使用" class="headerlink" title="六、ElementUI组件库的使用"></a>六、ElementUI组件库的使用</h2><h2 id="七、sass安装与基本语法"><a href="#七、sass安装与基本语法" class="headerlink" title="七、sass安装与基本语法"></a>七、sass安装与基本语法</h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-cli </tag>
            
            <tag> vue-router </tag>
            
            <tag> vuex </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react学习笔记（1）</title>
      <link href="/2022/07/28/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
      <url>/2022/07/28/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="React简介"><a href="#React简介" class="headerlink" title="React简介"></a>React简介</h2><p>React是用于构建用户界面的JavaScript库，起源于FaceBook的内部项目，于 2013 年 5 月开源。</p><p>React主要用于构建<a href="https://baike.baidu.com/item/UI/393851">UI</a>。你可以在React里传递多种类型的参数，如声明代码，帮助你渲染出UI、也可以是静态的<a href="https://baike.baidu.com/item/HTML/97049">HTML</a> DOM元素、也可以传递动态变量、甚至是可交互的应用组件。</p><p><strong>React的特点</strong></p><ul><li><strong>1.声明式设计</strong> −React采用声明范式，可以轻松描述应用。</li><li><strong>2.高效</strong> −React通过对DOM的模拟，最大限度地减少DOM操作。</li><li><strong>3.灵活</strong> −React可以与已知的库或框架很好地配合，可以在无需重构代码的情况下使用React实现新功能。</li><li><strong>4.JSX</strong> − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。</li><li><strong>5.组件</strong> − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</li><li><strong>6.单向响应的数据流</strong> − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在不使用脚手架的情况下，我们可以下载React相关的包进行使用，也可以使用CDN</p><p>这里我使用的是<code>v16.4.0</code>版本</p><p>React相关的文件：</p><ul><li>react.development.js —— React核心文件</li><li>react-dom.development.js —— React用来操作DOM的文件</li><li>babel.min.js —— 在React中会使用到jsx，但是浏览器不支持jsx，所以使用babel将jsx编译为js</li></ul><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--引入react核心库 核心库必须最先引入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/react/16.4.0/umd/react.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--引入react拓展库，react-dom，支持react操作dom--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/react-dom/16.4.0/umd/react-dom.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--引入babel,用于将jsx转换为js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="Hello-React"><a href="#Hello-React" class="headerlink" title="Hello React"></a>Hello React</h2><p>新建一个html文件，编写如下代码</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>hello_react<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 准备容器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--引入react核心库 核心库必须最先引入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../reactjs/react.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--引入react拓展库，react-dom，支持react操作dom--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../reactjs/react-dom.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--引入babel,用于将jsx转换为js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../reactjs/babel.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 此处一定要写text/babel,使用babel翻译jsx，默认js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 创建虚拟dom</span>    <span class="token keyword">const</span> <span class="token constant">VDOM</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>hello<span class="token punctuation">,</span>react<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span> <span class="token comment">// jsx语法</span>    <span class="token comment">// 渲染虚拟dom</span>    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token constant">VDOM</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>这里我是下载了React相关js文件到本地进行使用</p><p>需要注意的是，用来编写jsx语法的script标签，需要把type设置为babel，否则就不能使用jsx语法。</p><p><code>注：</code><span style="color:#f74e1e">接下来的所有代码都写在类型为“babel”的script标签中(type&#x3D;”text&#x2F;babel”)</span></p><p>在这个例子中，先准备了一个id为test的一个容器，然后使用jsx语法创建了一个虚拟DOM，也就是<code>h1</code>，最后使用ReactDOM的render方法将虚拟DOM进行渲染。</p><p>最后在浏览器打开</p><p><img src="/2022/07/28/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/image-20220728220010568.png" alt="image-20220728220010568"></p><p>看到如下内容，第一个React程序就写完了。</p><h2 id="创建虚拟DOM的方式"><a href="#创建虚拟DOM的方式" class="headerlink" title="创建虚拟DOM的方式"></a>创建虚拟DOM的方式</h2><h3 id="使用jsx进行创建"><a href="#使用jsx进行创建" class="headerlink" title="使用jsx进行创建"></a>使用jsx进行创建</h3><p><code>jsx</code>支持在js代码中嵌入标签，可以让编码人员更加简单的创建虚拟DOM</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 创建虚拟dom</span><span class="token keyword">const</span> <span class="token constant">VDOM</span> <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">hello,react</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token comment">// jsx语法</span><span class="token comment">// 渲染虚拟dom   虚拟DOM, 获取节点进行挂载</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token constant">VDOM</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="使用js进行创建"><a href="#使用js进行创建" class="headerlink" title="使用js进行创建"></a>使用js进行创建</h3><p>使用<code>React.createElement(标签名，标签属性，标签内容)</code>创建一个虚拟DOM，</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 创建虚拟dom</span><span class="token keyword">const</span> <span class="token constant">VDOM</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">'title'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">'hello react!'</span><span class="token punctuation">)</span><span class="token comment">// 渲染虚拟dom</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token constant">VDOM</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>如果需要创建子节点，则需要将标签内容修改为使用<code>React.createElement</code>方法创建的虚拟DOM</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 多层标签嵌套</span><span class="token keyword">const</span> <span class="token constant">VDOM</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">'title'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                                React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">'title'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">'hello react!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 渲染虚拟dom</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token constant">VDOM</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="/2022/07/28/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/image-20220728221706898.png" alt="image-20220728221706898"></p><p>其实，<code>jsx</code>创建的虚拟DOM最终编译后得到代码和js方式创建的是一样的，但是<code>jsx</code>更加简单，而且当面多多重标签深度嵌套的时候，代码会显得很冗余，所以一般情况下建议使用<code>jsx</code>。</p><h3 id="虚拟DOM与真实DOM的区别"><a href="#虚拟DOM与真实DOM的区别" class="headerlink" title="虚拟DOM与真实DOM的区别"></a>虚拟DOM与真实DOM的区别</h3><p>先编辑以下代码，在浏览器打开控制台，查看打印的结果</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 创建虚拟dom</span><span class="token keyword">const</span> <span class="token constant">VDOM</span> <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">hello,react</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token comment">// jsx语法</span><span class="token comment">// 渲染虚拟dom</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token constant">VDOM</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"虚拟dom"</span><span class="token punctuation">,</span><span class="token constant">VDOM</span><span class="token punctuation">)</span><span class="token comment">//真实dom</span><span class="token keyword">const</span> <span class="token constant">TDOM</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'demo'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"真实dom"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span><span class="token constant">TDOM</span><span class="token punctuation">)</span></code></pre><p><img src="/2022/07/28/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/image-20220728222835904.png" alt="image-20220728222835904"></p><p>总结一下</p><ul><li><p>虚拟dom本质就是Object类型的js对象（一般对象）</p></li><li><p>真实dom属性多，虚拟dom属性少，比较轻</p></li><li><p>虚拟dom最终会被react转换为真实dom，呈现在页面上</p></li></ul><h2 id="jsx语法规则"><a href="#jsx语法规则" class="headerlink" title="jsx语法规则"></a>jsx语法规则</h2><p><strong>jsx 语法规则：</strong></p><ul><li><p>1.定义虚拟dom时，不要写引号\</p></li><li><p>2.标签中混入js <code>表达式</code> 时，使用 <code>&#123;&#125;</code> ,注意区分js<code>语句</code>，<code>表达式</code></p><ul><li><code>表达式</code>：一个表达式会产生一个值，<ul><li>例：<code>a</code>,  <code>a+b</code>,  <code>demo(1)</code>, <code>arr.map()</code>,   <code>function test() &#123;&#125;</code></li></ul></li><li><code>语句</code>：<ul><li>例：<code>if()&#123;&#125;</code>,  <code>for()&#123;&#125;</code>, <code> switch()&#123;case:xxx&#125;</code></li></ul></li></ul></li><li><p>3.样式类名指定不用<code>class</code>,用<code>className</code>(class 是 ES6里类定义关键字，为了避免冲突)</p></li><li><p>4.内联样式要加双花括号<code> style=&#123;&#123;key:value&#125;&#125;</code></p></li><li><p>5.虚拟dom只能有<em>一个根标签</em></p></li><li><p>6.标签必须闭合</p></li><li><p>7.标签首字母</p><ul><li><p>（1）若小写字母开头，则将标签改为html中同名元素，若html中没有该标签同名元素，则报错</p></li><li><p>（2）若大写字母标签，react就去渲染对应的组件，若组件没有定义，则报错。</p></li></ul></li></ul><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> myId <span class="token operator">=</span> <span class="token string">"title"</span><span class="token keyword">const</span> myData <span class="token operator">=</span> <span class="token string">"hello jsx"</span><span class="token keyword">const</span> <span class="token constant">VDOM</span> <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">id</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>myId<span class="token punctuation">&#125;</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span><span class="token literal-property property">fontSize</span><span class="token operator">:</span><span class="token string">'20px'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>myId<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token constant">VDOM</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"jsx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><code>注：</code>使用jsx语法写标签时，不能在标签中写注释，只能写在{}包含的语句块中<code>例：&#123;/*这是一段注释*/&#125;</code></p><p><strong>小练习——列表渲染</strong></p><p>先定义几个模拟数据，放在一个列表中，然后遍历列表，取出列表中的元素，渲染在页面上</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//模拟一些数据</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"AngularJS"</span><span class="token punctuation">,</span> <span class="token string">"ReactJS"</span><span class="token punctuation">,</span> <span class="token string">"VueJS"</span><span class="token punctuation">]</span><span class="token comment">// 创建虚拟dom</span><span class="token keyword">const</span> <span class="token constant">VDOM</span> <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">前端框架列表</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token punctuation">&#123;</span>                data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token constant">VDOM</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"jsx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>为什么在<code>&#123;&#125;</code>中没有写for循环？因为在<code>&#123;&#125;</code>中只能写表达式，不能写语句，for循环就是一个语句。</p><p>使用map取出数组中的元素，返回一个被<code>li</code>标签包含的元素集合。这里的<code>key</code>则是该DOM元素的唯一标识，不应该重复，在react渲染DOM时，会将<code>新的虚拟DOM</code>的<code>key</code>与<code>旧的虚拟DOM</code>的<code>key</code>进行对比，保留已经存在的节点，并添加新的节点。也就是说，如果在上面的列表中再添加一个元素，react只会渲染新添加的这个元素，其他的保持不变，通过复用节点的方式提高效率。如果没有这个<code>key</code>，则无法判断两个节点是否相同，只能全部重新渲染，如果实在节点较多的情况下，容易使得浏览器卡顿。</p><p>最后看一下效果</p><p><img src="/2022/07/28/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/image-20220729075101204.png" alt="image-20220729075101204"></p><h2 id="组件的定义"><a href="#组件的定义" class="headerlink" title="组件的定义"></a>组件的定义</h2><h3 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h3><p>创建函数式组件 函数名就是类名，例如：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">函数定义组件（适用于 "简单组件" 定义）</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token comment">// 渲染组件到页面</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">/></span></span> <span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>函数式组件:</p><ul><li>函数和组件标签首字母必须大写</li><li>函数必须有返回值</li><li>render必须写闭合标签，<code>&lt;MyComponent/&gt;</code>或<code>&lt;MyComponent&gt;&lt;/MyComponent&gt;</code></li></ul><p>ReactDom.render 做了什么</p><ul><li><ol><li>react解析组件标签，找到 MyComponent 组件。</li></ol></li><li><ol start="2"><li>发现组件是函数定义的，随后调用该函数，将返回的虚拟dom转换为真实dom，呈现在页面中。</li></ol></li></ul><h3 id="类式组件"><a href="#类式组件" class="headerlink" title="类式组件"></a>类式组件</h3><p>类式组件，通过类来定义一个组件，类名就是组件名，例如：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">类定义组件（适用于复杂组件的定义）</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>在这个示例中，定义了一个<code>MyComponent</code>类继承<code>React.Component</code>(这个继承是创建类式组件所必须的)</p><p>在类式组件中，必须写render方法并返回虚拟DOM。</p><p><code>注：</code>自定义组件首字母大写（类名大写）</p><p>render是放在哪里的？ ——  类的原型对象上，供实例使用。 MyComponent.prototype</p><p>render中的this指向哪里 —— MyComponent的（组件）实例对象。</p><p>ReactDom.render 做了什么</p><ul><li><ol><li>react解析组件标签，找到 MyComponent 组件。</li></ol></li><li><ol start="2"><li>发现组件是使用类定义的，随后new出来该类的实例，</li></ol></li><li><ol start="3"><li>并通过该实例调用原型上的render方法，将render返回的虚拟dom转换为真实dom，呈现在页面中</li></ol></li></ul><h3 id="复合组件"><a href="#复合组件" class="headerlink" title="复合组件"></a>复合组件</h3><p>定义一个组件作为父组件，在父组件中使用子组件，示例：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">PersonComponent</span>  <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">父组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SonComponent</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SonComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">子组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="React三大属性"><a href="#React三大属性" class="headerlink" title="React三大属性"></a>React三大属性</h2><p>接下来的内容基本都是在针对类式组件进行展开，座椅学习接下来的内容之前，需要对类的相关知识有一定的了解</p><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p>在前面的例子中，我们一直在使用<code>ReactDOM.render()</code>来渲染我们定义的组件，但是第一次挂载完成后，我们很难再修改组件的样式或状态。</p><p>React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。</p><p>React 里，只需更新组件的 state，React则会根据新的 state 重新渲染用户界面（不要操作 DOM），也就是状态驱动着组件的更新。</p><p>创建一个类定义的组件<code>（为何是类定义？因为在旧版本的React中，函数定义组件不支持state和refs）</code></p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 创建类定义组件</span><span class="token keyword">class</span> <span class="token class-name">Weather</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 构造器调用几次？ --- 1次</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// console.log(this) //这里的this是组件实例</span>        <span class="token comment">// state必须是一个对象</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">isHot</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token literal-property property">wind</span><span class="token operator">:</span><span class="token string">'微风'</span><span class="token punctuation">&#125;</span>        <span class="token comment">// 解决changeWeather中this指向问题</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>changeWeather <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeWeather</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>    <span class="token comment">// 注意：通过类调用方法和通过实例调用不同</span>    <span class="token function">changeWeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// changeWeather是作为onClick的回调，所以不是通过实例调用，是直接调用</span>        <span class="token comment">// 类中的方法默认开启了局部的严格模式，所以changeWeather中的this为undefind</span>        <span class="token comment">// 获取isHot原始值</span>        <span class="token keyword">const</span> isHot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isHot        <span class="token comment">// 原始值取反，使用setState进行更新，（合并，非替换）</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">isHot</span><span class="token operator">:</span> <span class="token operator">!</span>isHot<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 读取状态</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> isHot<span class="token punctuation">,</span> wind <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token punctuation">&#123;</span><span class="token comment">/*这里是通过类直接调用方法，this指向不为实例，为undefind*/</span><span class="token punctuation">&#125;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>changeWeather <span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">                今天天气</span><span class="token punctuation">&#123;</span> isHot <span class="token operator">?</span> <span class="token string">"炎热"</span> <span class="token operator">:</span> <span class="token string">"凉爽"</span> <span class="token punctuation">&#125;</span><span class="token plain-text">,</span><span class="token punctuation">&#123;</span>wind<span class="token punctuation">&#125;</span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 渲染组件到页面</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Weather</span></span><span class="token punctuation">/></span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这个示例实现的功能是，通过点击组件，修改组件的<code>state</code>，实现组件内容的改变</p><p><code>注！！：</code>react不认可直接修改state借助内置api去更改，通过setState方法进行修改，该方法接受一个对象，在对象中添加需要修改的属性值。</p><p>首先在构造器中初始化<code>state</code>，添加相关的状态，例如<code>isHot</code>、<code>wind</code>，在render中使用了一个三元表达式，根据isHot的真假显示”炎热“或者”凉爽“。</p><p>给<code>h1</code>标签添加了一个点击事件，定义了<code>changeWeather</code>方法作为点击事件的回调。</p><p><code>onClick=&#123; this.changeWeather &#125;</code>语句标识将类方法<code>changeWeather</code>作为点击事件的回调，this指向的是Weather这个类，不能使用<code>this.changeWeather()</code>，加（）表示直接调用该方法，会使得点击事件的回调变成<code>changeWeather</code>的返回值，但是该方法没有返回值，也就是undefind，使得点击事件不生效。</p><p>关于<code>changeWeather</code>中的this指向问题，在这里需要先了解类方法和实例方法的区别，类方法则是直接通过该类进行调用，例如<code>ClassName.function()</code>,就是<code>类名.方法名</code>。实例方法需要先通过new关键字创建一个实例（类的实例）。通过<code>实例名.实例方法</code>的方式进行调用，两种方法中this的作用域是不同的。</p><p>在点击事件中的<code>this.changeWeather</code>，this指向当前类，是直接调用类方法，类中的方法默认开启了局部的严格模式，所以changeWeather中的this为undefind（如果不开启严格模式，则指向window）所以使用<code>this.state</code>和<code>this.setState</code>时，会提示undefind。所以我们需要修改this的指向，可以使用bind方法，bind方法会返回一个新的函数，并将修改该函数的作用域。</p><p>在构造器中写入<code>this.changeWeather = this.changeWeather.bind(this) </code>，构造器中的this指向的是当前实例，通过传入当前实例，调用bind方法返回一个新的<code>changeWeather</code>并挂载在实例上，该方法的this指向当前实例，然后我们就能在<code>changeWeather</code>这个方法中修改state。</p><p>可以在构造器中打印一下this，结合上面内容进行分析</p><p><img src="/2022/07/28/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/image-20220729090104615.png" alt="image-20220729090104615"></p><p><strong>简写一下</strong></p><p>可以弃用构造函数，直接将state添加到类属性中</p><p>然后类方法使用箭头函数:</p><ul><li>箭头函数没有自己的this。</li><li>如果在箭头函数中使用this,则使用外层函数的this作为自己的this。</li></ul><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Weather</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 初始化状态</span>    state <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">isHot</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token literal-property property">wind</span><span class="token operator">:</span><span class="token string">'微风'</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 自定义方法 赋值语句 + 箭头函数</span>    <span class="token function-variable function">changeWeather</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> isHot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isHot        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">isHot</span><span class="token operator">:</span> <span class="token operator">!</span>isHot<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 读取状态</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> isHot<span class="token punctuation">,</span> wind <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>changeWeather<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">                今天天气</span><span class="token punctuation">&#123;</span> isHot <span class="token operator">?</span> <span class="token string">"炎热"</span> <span class="token operator">:</span> <span class="token string">"凉爽"</span> <span class="token punctuation">&#125;</span><span class="token plain-text">,</span><span class="token punctuation">&#123;</span>wind<span class="token punctuation">&#125;</span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>props用于向组件传递数据</p><p>state 和 props 主要的区别在于 props是只读，不可变，而 state 可以根据与用户交互来改变。这就是为什么有些容器组件需要定义 state 来更新和修改数据。 而子组件只能通过 props 来传递数据。</p><h4 id="props传值"><a href="#props传值" class="headerlink" title="props传值"></a>props传值</h4><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// props传值</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token function">parseInt</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>sex<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// ReactDOM.render(&lt;Person name="四个火" age="21" sex="男"/>, document.getElementById("test"));</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"四个火"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token string">"21"</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">&#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>person<span class="token punctuation">&#125;</span></span><span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以直接在标签内写自定义属性，写在组件标签内的属性会被添加到实例的props属性中,也可以使用展开运算符<code>&#123;...person&#125;</code></p><p>这里的 展开语法与ES6有些不同，ES6中的展开运算符不允许展开对象，React组件标签内允许，其他地方不允许</p><p>打印一下当前组件实例</p><p><img src="/2022/07/28/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/image-20220729113657886.png" alt="image-20220729113657886"></p><p>可以看到我们添加的属性都被添加到props中了</p><p>然后就可以在组件中使用props里面的数据</p><h4 id="props限制"><a href="#props限制" class="headerlink" title="props限制"></a>props限制</h4><p>有时候我们希望对props的数据进行限制，例如是否必传，默认值、数据类型等</p><p>可以使用<code>React.PropTypes</code>完成该需求，在15.5版本后的React中，为了减轻React的重量，所以该模块被移到了 <code>prop-types </code>库，用户根据需要自行引入该模块</p><p>下载<code>prop-types.js</code>文件，或CDN引入文件。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/prop-types/15.6.1/prop-types.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>引入之后，全局多了一个对象 PropTypes，假如现在创建了一个名为Person的组件，为组件添加一个propTypes属性，用于属性限制</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">Person<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 类型和必要性限制</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>    <span class="token literal-property property">sex</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>    <span class="token literal-property property">spack</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">&#125;</span>Person<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 默认值限制，如果没有进行传值，则使用默认值</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">&#125;</span></code></pre><p>需要注意的是这里的<code>propTypes</code>首字符小写，表示用于类型限制的属性，<code>PropTypes</code>首字母大写，是一个对象，用来限制的属性</p><p>几种常见限制：</p><ul><li>isRequired 限制必填</li><li>string 限制字符串</li><li>number 限制数值</li><li>object 对象</li><li>array 数组</li><li>func 限制方法 —— function 由于function是js里面的关键字，所以使用func避免冲突</li></ul><p>然后向组件传参数</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"四个火"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">&#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>person<span class="token punctuation">&#125;</span></span> <span class="token attr-name">spack</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>spack<span class="token punctuation">&#125;</span></span><span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">spack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"spack"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>虽然没有向组件传递sex，但是由于写了默认参数，所以组件就会默认sex&#x3D;”男”。</p><h4 id="props简写"><a href="#props简写" class="headerlink" title="props简写"></a>props简写</h4><p>直接给类添加<code>propTypes</code>和<code>defaultProps</code>属性，注意：是类属性，不是实例属性，所以加上static关键字</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*        * 拓展        * 构造器是否接收props，并传递给super，取决于：是否希望在构造器中使用this访问props        * */</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token comment">// 通过实例使用props ，这里如果不传递props给super，this.props为undefind,可直接使用props,如下</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token comment">//直接使用props</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//这里是类属性，不是实例属性，所以加上static关键字，需要注意区分</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>        <span class="token literal-property property">sex</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>        <span class="token literal-property property">spack</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>func    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>        <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">"男"</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>age <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">/*props是只读的，这个地方不是修改age,只是对展示的值进行计算*/</span> <span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>sex<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"四个火"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">&#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>person<span class="token punctuation">&#125;</span></span> <span class="token attr-name">spack</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>spack<span class="token punctuation">&#125;</span></span><span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">spack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"spack"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>这里的构造器一般可以不用添加，只是作为一个拓展，如果希望在构造器中使用this访问props时，需要将props传递给super()。</p><h4 id="函数式组件使用props"><a href="#函数式组件使用props" class="headerlink" title="函数式组件使用props"></a>函数式组件使用props</h4><p>前面提到，函数式组件不支持state和refs，但是也能使用props以及限制props限制</p><p>参考下面的示例</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">&#125;</span> <span class="token operator">=</span> props    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>sex<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>Person<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token comment">//组件属性，不是方法</span>    <span class="token comment">/**     * 类型限制，必要性限制     */</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>    <span class="token literal-property property">sex</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span><span class="token punctuation">&#125;</span>Person<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 默认值限制，如果没有进行传值，则使用默认值</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"四个火"</span><span class="token punctuation">&#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>person<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>注意：props限制不能写到方法体里面</code></p><h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p>在原生js中，通常使用<code>document.getElementById</code>、<code>document.querySelector</code>等这种类似的操作来获取我们需要的DOM元素</p><p>React为我们提供了一种非常特殊的属性 <code>ref</code>，你可以用来绑定到 render() 输出的任何组件上</p><p>下面是几个适合使用 refs 的情况：</p><ul><li>管理焦点，文本选择或媒体播放。</li><li>触发强制动画。</li><li>集成第三方 DOM 库。</li></ul><p>不能在函数组件上使用 <code>ref</code> 属性，因为他们没有实例</p><h4 id="字符串形式的ref"><a href="#字符串形式的ref" class="headerlink" title="字符串形式的ref"></a>字符串形式的ref</h4><p>给组件添加ref属性 <code>ref=&quot;refName&quot;</code>，然后就能通过在示例方法中通过this.refs.refName获得DOM。</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 点击按钮时，显示左边输入框的数据</span>    <span class="token function-variable function">showInputData1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token comment">// 通过获取id的方式</span>        <span class="token comment">// const input = document.getElementById('input1')</span>        <span class="token comment">// alert(input.value)</span>        <span class="token comment">// 通过ref</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> input1 <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>refs        <span class="token function">alert</span><span class="token punctuation">(</span>input1<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 右边输入框失去焦点时，显示右边输入框的数据</span>    <span class="token function-variable function">showInputData2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> input2 <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>refs        <span class="token function">alert</span><span class="token punctuation">(</span>input2<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input1<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点击按钮提示数据<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token plain-text">&amp;nbsp;                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>showInputData1<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">点击提示左边的数据</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">&amp;nbsp;                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onBlur</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>showInputData2<span class="token punctuation">&#125;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>失去焦点提示数据<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/07/28/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/image-20220729131019005.png" alt="image-20220729131019005"></p><p>字符串形式的ref虽然方便，但是效率并不高，所以官方不建议使用，并可能会在未来的版本被移除</p><h4 id="回调函数形式的ref"><a href="#回调函数形式的ref" class="headerlink" title="回调函数形式的ref"></a>回调函数形式的ref</h4><p>React 还支持另一种设置 refs 的方式，称为“回调 refs”。它能助你更精细地控制何时 refs 被设置和解除。</p><p>内联函数语法：ref&#x3D;{ currentNode &#x3D;&gt; this.input1 &#x3D; currentNode } —— 把ref当前所处的节点挂载在实例自身上，并取名为input1</p><p>回调函数语法：ref&#x3D;{ this.input2 } —— 把当前节点传递给回调函数input2</p><p>下面是一个完整的示例</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 点击按钮时，显示左边输入框的数据</span>    <span class="token function-variable function">showInputData1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token comment">// 通过ref</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> input1 <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token function">alert</span><span class="token punctuation">(</span>input1<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 右边输入框失去焦点时，显示右边输入框的数据</span>    <span class="token function-variable function">showInputData2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input2<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function-variable function">saveInput</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">currentNode</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>input2 <span class="token operator">=</span> currentNode    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    *  ref=&#123; currentNode => this.input1 = currentNode &#125;    *   把ref当前所处的节点挂载在实例自身上，并取名为input1    * */</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">                &lt;input ref=</span><span class="token punctuation">&#123;</span> <span class="token parameter">currentNode</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>input1 <span class="token operator">=</span> currentNode <span class="token punctuation">&#125;</span><span class="token plain-text">/*内联函数*/ id="input1" type="text" placeholder="点击按钮提示数据"/>&amp;nbsp;                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>showInputData1<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">点击提示左边的数据</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">&amp;nbsp;                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onBlur</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>showInputData2<span class="token punctuation">&#125;</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>saveInput <span class="token comment">/*使用类绑定的函数作为回调函数*/</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>失去焦点提示数据<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>关于refs回调中，回调函数是内联函数与回调函数是类绑定函数的区别：</p><ul><li>内联函数: 当组件更新时，会触发两次回调，第一次为null,第二次为当前节点，因为react会清空旧的ref并设置新的</li><li>类绑定函数: 当组件更新时，react会比较两次函数名相同，只会触发一次回调</li></ul><h4 id="createRef"><a href="#createRef" class="headerlink" title="createRef"></a>createRef</h4><p>使用 <code>React.createRef()</code> 创建ref，并通过 <code>ref</code> 属性附加到 React 元素</p><p>React.createRef调用后会返回一个容器，该容器可以存储被ref所标识的节点</p><p>render执行的时候，发现有一个ref，而且是用createRef创建的容器，就会将当前ref所在的节点存储到这个容器里面</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    myRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 一个节点单独使用一个</span>    <span class="token function-variable function">showInputData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> current <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myRef<span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myRef <span class="token punctuation">&#125;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input1<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点击按钮提示数据<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token plain-text">&amp;nbsp;                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>showInputData<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">点击提示左边的数据</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>关于refs回调中，回调函数是内联函数与回调函数是类绑定函数的区别:</p><ul><li>内联函数: 当组件更新时，会触发两次回调，第一次为null,第二次为当前节点，因为react会清空旧的ref并设置新的</li><li>类绑定函数: 当组件更新时，react会比较两次函数名相同，只会触发一次回调</li></ul><h2 id="React中的事件处理"><a href="#React中的事件处理" class="headerlink" title="React中的事件处理"></a>React中的事件处理</h2><ol><li><p>通过onXxx属性指定事件处理函数（注意大小写）</p><ul><li>React使用的是自定义（合成）事件，而不是原生的DOM事件 — 为了更好的兼容性</li><li>React中的事件是通过事件委托方式处理的（通过冒泡的形式委托给最外层的元素） — 为了高效</li></ul></li><li><p>通过event.target得到发生事件的DOM元素对象 ,如下例,不要过渡使用ref</p></li></ol><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>logText <span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">按钮</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token punctuation">&#125;</span>    <span class="token function-variable function">logText</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Demo</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h2><p>在 <code>HTML</code> 中，表单元素如 <code>&lt;input&gt;</code>，<code>&lt;select&gt;</code>等 表单元素通常保持自己的状态，并根据用户输入进行更新</p><p>而在 <code>React</code> 中，可变状态一般保存在组件的 <code>state(状态)</code> 属性中，并且只能通过<code>setState</code>方法更新。</p><p>我们可以通过使 <code>React</code> 的 <code>state</code> 成为 “单一数据源原则” 来结合这两个形式。然后渲染表单的 React 组件也可以控制在用户输入之后的行为。</p><p>这种形式，其值由 <code>React</code> 控制的输入表单元素称为“受控组件”。</p><p>那么相反的，值并不由 <code>React</code> 进行控制，该组件自己输入，减少等等，该元素成为”非受控组件“。</p><h3 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h3><p>现用现取，非受控组件</p><p>如下例，只有在触发submit提交的时候，触发回调函数，才会从输入框中取值。</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Login</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//阻止表单提交</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>usernameInput<span class="token punctuation">,</span>passwordInput<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">你输入的用户名是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>usernameInput<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">，密码是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>passwordInput<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.zhaojiuyi.top<span class="token punctuation">"</span></span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit <span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">                用户名：</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span> <span class="token parameter">currentNode</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>usernameInput <span class="token operator">=</span> currentNode <span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token plain-text">                密码：</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span> <span class="token parameter">currentNode</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>passwordInput <span class="token operator">=</span> currentNode <span class="token punctuation">&#125;</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">登录</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3><p>在下面这个实例中，通过绑定输入框的change事件，获取value，将value添加到组件状态（state）中，</p><p>然后将state添加到输入框的value，实现数据的双向绑定</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Login</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>     state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">'19812345678'</span><span class="token punctuation">,</span> <span class="token comment">// 添加一个默认值查看效果</span>         <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">''</span>     <span class="token punctuation">&#125;</span>     <span class="token comment">// input框change时的回调，将value添加到state中</span>     <span class="token function-variable function">usernameInput</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>         <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> value <span class="token punctuation">&#125;</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>target         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">username</span><span class="token operator">:</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>     <span class="token function-variable function">passwordInput</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>         <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> value <span class="token punctuation">&#125;</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>target         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">password</span><span class="token operator">:</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>     <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>         event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//阻止表单提交</span>         <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">用户名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">，密码：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>password<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>     <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.zhaojiuyi.top<span class="token punctuation">"</span></span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit <span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">                 用户名：</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usernameInput <span class="token punctuation">&#125;</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token plain-text">                 密码：</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>passwordInput <span class="token punctuation">&#125;</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>password<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token plain-text">                 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">登录</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">             </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>         <span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre><h2 id="高阶函数与函数柯里化"><a href="#高阶函数与函数柯里化" class="headerlink" title="高阶函数与函数柯里化"></a>高阶函数与函数柯里化</h2><p>高阶函数：如果一个函数满足以下2个规范中的任何一个，那么该函数就是高阶函数</p><ul><li>若A函数，接受的参数是一个函数，那么A函数就可以称为高阶函数</li><li>若A函数，调用A函数得到的返回值依然是一个函数，那么A就可以成为高阶函数<ul><li>常见的高阶函数：Promise,setTimeOut,forEach.map等</li></ul></li></ul><p>函数的柯里化： 通过函数调用继续返回函数的方式，实现多次接收参最后统一处理的函数编码形式。</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Login</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">''</span>    <span class="token punctuation">&#125;</span>    <span class="token function-variable function">saveFromData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dataType</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>dataType<span class="token punctuation">]</span><span class="token operator">:</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//阻止表单提交</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">用户名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">，密码：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>password<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.zhaojiuyi.top<span class="token punctuation">"</span></span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit <span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">                用户名：</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveFromData</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token plain-text">                密码：</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveFromData</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>password<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">登录</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>值得注意的是，此例子使用了<code>saveFromData</code>传入一个数据类型参数，然后返回一个箭头函数作为<code>onChange</code>的回调函数，并接收<code>event</code>参数</p><p>也就是说，<code>onChange</code>的回调不再是<code>saveFromData</code>函数，而是它返回的一个箭头函数</p><p>我们称saveFromData为高阶函数</p><p>而在调用<code>saveFromData</code>方法的同时，我们传入了一个参数，然后使用返回的函数接收了另一个参数，并在返回的函数中使用了统一处理了所有参数，这就是柯里化，看下面这个示例</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">addNumber</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> b <span class="token operator">+</span> a    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><p>所谓的生命周期，就是指组件从被创建出来，到被使用，更新，最后被销毁的这么一个过程</p><p>在这个过程中，React提供了我们会自动执行的不同的<code>钩子函数</code>，我们称之为生命周期函数，或生命周期钩子</p><p>先通过一个简单的案例认识一下生命周期</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Life</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">opacity</span><span class="token operator">:</span><span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token function-variable function">death</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 卸载组件</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">unmountComponentAtNode</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 生命周期回调函数 &lt;==>生命周期钩子：组件挂载完成</span>    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 每隔200毫秒将透明度减少0.1</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> <span class="token punctuation">&#123;</span>opacity<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state            opacity <span class="token operator">-=</span> <span class="token number">0.1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>opacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                opacity <span class="token operator">=</span> <span class="token number">1</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>opacity<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 生命周期回调函数：组件即将卸载</span>    <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//清空定时器</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>interval<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token punctuation">&#123;</span><span class="token comment">/*绑定state状态，修改样式*/</span><span class="token punctuation">&#125;</span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>opacity<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">React好难啊，不想学了</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>death<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">不学了</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Life</span></span><span class="token punctuation">/></span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//挂载组件</span></code></pre><p>在示例中，定义了一个state，保存组件的透明度状态，我们需要创建一个计时器，每隔一定时间，修改state，将透明度降低</p><p>但是我们不能在render中写入我们的定时器，应为定时器会不断更新state，然而state的修改会驱动render方法的调用，这样我们就会不停创建新的计时器，对cpu造成很大的负担</p><p>这时候我们希望只在组件挂载时创建一个定时器，这时候就会用到我们的生命周期钩子</p><p><code>componentDidMount</code>表示组件挂载完成时，也就是说组件挂载完成后会调用这个函数<br><code>componentWillUnmount</code>表示组件即将销毁，也就是说组件销毁之前会触发这个函数</p><p>用一张图片表示组件的生命周期</p><p><img src="/2022/07/28/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="生命周期"></p><p>用一个示例来打印表示组件的生命周期，可以打开控制台查看</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Count</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//构造器</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Count---constructor"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//组件即将挂载钩子</span>    <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Count---componentWillMount"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//组件挂载完毕的钩子</span>    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Count---componentDidMount"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//即将卸载组件钩子</span>    <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Count---componentWillUnmount"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 控制组件是否更新的钩子（阀门），返回true则允许更新，否则不允许     * 如果不写该钩子，则默认为true     */</span>    <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Count---shouldComponentUpdate"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 组件将要更新的钩子,接下来调用render</span>    <span class="token function">componentWillUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Count---componentWillUpdate"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//组件更新完毕的钩子</span>    <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Count---componentDidUpdate"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Count---render"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>num<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>addCount<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">点击+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>death<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">卸载组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>force<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">强制更新组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function-variable function">addCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">num</span><span class="token operator">:</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function-variable function">death</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 卸载组件</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">unmountComponentAtNode</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function-variable function">force</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">//强制更新组件，不需要通过shouldcomponentUpdate钩子</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    * setState后就是shouldComponentUpdate钩子，在到达componentWillUpdate钩子    * forceUpdate跳过了shouldComponentUpdate，直接到达componentWillUpdate    * */</span><span class="token punctuation">&#125;</span><span class="token comment">// 父组件</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    state <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"鄙人四个火"</span><span class="token punctuation">&#125;</span>    <span class="token function-variable function">changeProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"太阳当空丶赵"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">组件A</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeProps<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">组件传参</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">B</span></span> <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">B</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//子组件</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 当父组件render时，触发此钩子</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"B---componentWillReceiveProps"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"B---render"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">组件B</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">name:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Count</span></span><span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">A</span></span><span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>打开控制台，点击按钮，查看对应打印的生命周期</p><p><img src="/2022/07/28/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/image-20220729143900258.png" alt="image-20220729143900258"></p><p><strong>总结一下：</strong></p><p><strong>组件挂载时</strong>，会首先触发<code>constructor</code>构造器，然后触发<code>componentWillMount</code>钩子（组件即将挂载，也就是挂载前，此时还未进行挂载），然后执行<code>render</code>方法返回虚拟dom，将虚拟dom转换为真实dom后完成挂载，进入<code>componentDidMount</code>钩子（完成挂载）；</p><p><strong>组件更新时</strong>，如果是使用<code>setState</code>方法进行状态更新，则进入<code>shouldComponentUpdate</code>钩子，判断是否更新状态，就相当于一个开关，如果为false,则不会触发接下来的钩子，用户没有自定义<code>shouldComponentUpdate</code>钩子时，默认为true，否则更具自定义规则进行，随后进入<code>componentWillUpdate</code>钩子（组件即将更新，也就是更新之前），再然后调用<code>render</code>方法，更新组件状态，然后进入<code>componentDidUpdate</code>钩子（更新完成）；如果使用<code>forceUpdate</code>方法强制更新组件，则会跳过<code>shouldComponentUpdate</code>钩子（不判断是否更新），直接进入<code>componentWillUpdate</code>，然后调用<code>render</code>，最后<code>componentDidUpdate</code>（更新完成）;</p><p><strong>如果是父组件触发<code>render</code>方法</strong>，则子组件将触发<code>componentWillReceiveProps</code>钩子（即将向子组件传递props，也就是即将向子组件传递参数），然后就和正常更新组件状态的钩子一样，到达<code>shouldComponentUpdate =&gt; componentWillUpdate =&gt; render =&gt; componentDidUpdate</code>;</p><p><strong>销毁组件时</strong>，进入<code>componentWillUnmount</code>钩子（即将销毁组件，销毁组件可以调用<code>ReactDOM.unmountComponentAtNode(这里传入一个dom节点)）</code>，最后完成组件的销毁</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> jsx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript基础</title>
      <link href="/2022/07/25/TypeScript%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/07/25/TypeScript%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="TypeScript简介"><a href="#TypeScript简介" class="headerlink" title="TypeScript简介"></a>TypeScript简介</h2><p>TypeScript 是 JavaScript 的一个超集，支持 ECMAScript 6 标准。</p><p>TypeScript扩展了<a href="https://baike.baidu.com/item/JavaScript">JavaScript</a>的语法，所以任何现有的JavaScript程序可以运行在TypeScript环境中。TypeScript是为大型应用的开发而设计，并且可以编译为JavaScript。</p><p>TypeScript 是一种给 JavaScript 添加特性的语言扩展。增加的功能包括：</p><ul><li>类型批注和编译时类型检查</li><li>类型推断</li><li>类型擦除</li><li>接口</li><li>枚举</li><li>Mixin</li><li>泛型编程</li><li>名字空间</li><li>元组</li><li>Await</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装<code>TypeScript</code>需要使用到npm，所以先确保本地有安装nodejs。</p><p>使用npm安装</p><pre class="language-none"><code class="language-none">npm install -g typescript</code></pre><p>安装完成后在命令行窗口使用<code>tsc -v</code>查看版本号</p><p><img src="/2022/07/25/TypeScript%E5%9F%BA%E7%A1%80/image-20220725074310017.png" alt="image-20220725074310017"></p><p>如图所示表示安装成功</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>首先编写第一个hello world程序</p><p>创建一个<code>myFirstTs.ts</code>文件，写入以下代码</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> hello<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">'hello TypeScript'</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span></code></pre><p>ts代码需要编译成js代码方可运行</p><p>使用tsc命令</p><p>typescript编译器会将.ts文件编译为.js文件，然后用node命令运行js</p><p><img src="/2022/07/25/TypeScript%E5%9F%BA%E7%A1%80/image-20220725074924973.png" alt="image-20220725074924973"></p><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><p>TypeScript提供了与JavaScript几乎相同的数据类型，同时还添加了枚举类型</p><h3 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h3><p>TypeScript里的所有数字都是浮点数。 这些浮点数的类型是 <code>number</code>。 除了支持十进制和十六进制字面量，TypeScript还支持ECMAScript 2015中引入的二进制和八进制字面量。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> num1<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">// 十进制 10</span><span class="token keyword">let</span> num2<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0b10</span> <span class="token comment">// 二进制 2</span><span class="token keyword">let</span> num3<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0o10</span> <span class="token comment">// 八进制 8</span><span class="token keyword">let</span> num4<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0x10</span> <span class="token comment">// 十六进制 16</span></code></pre><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串类型为<code>string</code>，和JavaScript一样，可以使用双引号（ <code>&quot;</code>）或单引号（<code>&#39;</code>）表示字符串，还可以使用模板字符串</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 字符串类型</span><span class="token keyword">let</span> str1<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"String"</span><span class="token keyword">let</span> str2<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str1<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span></code></pre><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>布尔值就是简单的true&#x2F;false，和其他语言一样，叫做<code>boolean</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> bool<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span></code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组有两种定义方式</p><p>第一种：在元素类型后加上<code>[]</code>,表示由此类型元素构成的数组</p><p>第二种：使用数组泛型，<code>Array&lt;元素类型&gt; </code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> list1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">let</span> list2<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span></code></pre><p>可以通过下标访问数组元素，例：<code>list1[0]</code></p><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>元组类型和数组类似，元组类型表示一个已知元素类型和元素数量的数组，元组中的元素类型可以不同</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> tuple<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'string'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">]</span></code></pre><p>元组和数组一样，可以通过下标访问元组元素</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p><code>enum</code>类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// enum 关键字定义一个表示性别的枚举</span><span class="token keyword">enum</span> Gender<span class="token punctuation">&#123;</span>    male <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    Female <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token comment">// 在对象中使用枚举</span><span class="token keyword">let</span> obj  <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'太阳当空丶赵'</span><span class="token punctuation">,</span>    sex<span class="token operator">:</span> Gender<span class="token punctuation">.</span>male<span class="token punctuation">&#125;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>sex <span class="token operator">===</span> Gender<span class="token punctuation">.</span>male<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><p>枚举类型提供的一个便利是你可以由枚举的值得到它的名字，当我们知道数值为0,但是不知道映射到哪个名字时，可以查找相应的名字</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Gender<span class="token punctuation">&#123;</span>    male <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    Female <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> str<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> Gender<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></code></pre><h3 id="任意类型"><a href="#任意类型" class="headerlink" title="任意类型"></a>任意类型</h3><p>声明变量时如果不指定类型，ts解析器自动判断变量类型为any（隐式any）</p><p>声明为 任意类型<code>any</code> 的变量可以赋予任意类型的值。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 数字类型</span>x <span class="token operator">=</span> <span class="token string">'I am who I am'</span><span class="token punctuation">;</span>    <span class="token comment">// 字符串类型</span>x <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 布尔类型</span></code></pre><p>我们可以对 any 进行任何操作，不需要检查类型。</p><p>但是没有类型检查就没有意义了，跟写JS一样。很不安全。</p><p>必要时可以使用 <code>unknown</code>,<code>unknown</code> 类型不能赋值给除了 <code>unknown</code> 或 <code>any</code> 的其他任何类型，使用前必需显式进行指定类型，或是在有条件判断情况下能够隐式地进行类型推断的情况</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> num<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span><span class="token keyword">let</span> b<span class="token operator">:</span><span class="token builtin">unknown</span>b <span class="token operator">=</span> <span class="token string">'123'</span><span class="token comment">// num = b; // 报错</span><span class="token comment">// 类型断言,告诉解析器变量实际类型</span>num <span class="token operator">=</span> b <span class="token keyword">as</span> <span class="token builtin">number</span><span class="token punctuation">;</span>num <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> b<span class="token punctuation">;</span><span class="token comment">// 类型保护</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><p>某种程度上来说，<code>void</code>类型像是与<code>any</code>类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 <code>void</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"abcdefg"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>声明一个<code>void</code>类型的变量没有什么用，因为你只能为它赋予<code>undefined</code>和<code>null</code></p><h3 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h3><p>TypeScript里，<code>undefined</code>和<code>null</code>两者各自有自己的类型分别叫做<code>undefined</code>和<code>null</code>。 和 <code>void</code>相似，它们的本身的类型用处不是很大：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> u<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token keyword">let</span> n<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><p>默认情况下<code>null</code>和<code>undefined</code>是所有类型的子类型。 就是说你可以把 <code>null</code>和<code>undefined</code>赋值给<code>number</code>类型的变量。</p><h3 id="Never"><a href="#Never" class="headerlink" title="Never"></a>Never</h3><p><code>never</code>类型表示的是那些永不存在的值的类型。</p><p><code>never</code>类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 返回never的函数必须存在无法达到的终点</span><span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 推断的返回值类型为never</span><span class="token keyword">function</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Something failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 返回never的函数必须存在无法达到的终点</span><span class="token keyword">function</span> <span class="token function">infiniteLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>有时候你会遇到这样的情况，你会比TypeScript更了解某个值的详细信息</p><p>类型断言可以告诉解析器变量实际类型</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> str<span class="token operator">:</span><span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token string">'123'</span><span class="token comment">// as 语法</span><span class="token keyword">let</span> num1<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> str <span class="token keyword">as</span> <span class="token builtin">number</span><span class="token comment">// 尖括号语法</span><span class="token keyword">let</span> num2<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span>str</code></pre><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><p>和js一样，我们可以通过var，let，const关键字声明一个变量。let在很多方面与var相似，但是没有变量提升，而且使用的是块作用域，避免了一些常见问题。const则是对let的一个增强，能够组织对同一个变量的二次赋值。</p><p>TypeScript 变量的命名规则：</p><ul><li><p>变量名称可以包含数字和字母。</p></li><li><p>除了下划线 <strong>_</strong> 和美元 <strong>$</strong> 符号外，不能包含其他特殊字符，包括空格。</p></li><li><p>变量名不能以数字开头。</p></li></ul><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>类型别名会给一个类型起个新名字。类型别名有时和接口很像，但是可以作用于原始值，联合类型，元组以及其它任何你需要手写的类型</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 类型别名</span><span class="token keyword">type</span> <span class="token class-name">myType1</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token keyword">let</span> str<span class="token operator">:</span>myType1 <span class="token operator">=</span> <span class="token string">'123'</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str<span class="token punctuation">)</span> <span class="token comment">// string</span><span class="token keyword">type</span> <span class="token class-name">myType2</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span><span class="token keyword">let</span> num<span class="token operator">:</span>myType2num <span class="token operator">=</span> <span class="token number">1</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span> <span class="token comment">// number</span><span class="token comment">// 描述一个对象的类型</span><span class="token keyword">type</span> <span class="token class-name">myType3</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span>    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj<span class="token operator">:</span>myType3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">"123"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">&#125;</span></code></pre><h3 id="变量声明-1"><a href="#变量声明-1" class="headerlink" title="变量声明"></a>变量声明</h3><p><strong>let [变量名] : [类型] &#x3D; 值;</strong></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 声明变量，同时指定类型</span><span class="token keyword">let</span> num<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span><span class="token keyword">let</span> str<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span><span class="token keyword">let</span> bool<span class="token operator">:</span><span class="token builtin">boolean</span><span class="token punctuation">;</span><span class="token keyword">let</span> a<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">;</span> <span class="token comment">//声明为any的变量可以赋予任何类型的值</span>a <span class="token operator">=</span> <span class="token number">123</span>a <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token comment">// 声明变量时如果不指定类型，ts解析器自动判断变量类型为any（隐式any）</span><span class="token comment">// any类型的变量可以赋值给任意类型的变量，不会报错，必要时可以使用unknown</span><span class="token comment">//</span><span class="token keyword">let</span> b<span class="token operator">:</span><span class="token builtin">unknown</span>b <span class="token operator">=</span> <span class="token string">'123'</span>num <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token comment">// 字面量,限制该该变量的值就为10，不能改变</span><span class="token keyword">let</span> data<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// 可以使用 | 来连接多个类型</span><span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token number">10</span> <span class="token operator">|</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">let</span> s<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token number">123</span></code></pre><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 函数声明</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>numa<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>numb<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> numa <span class="token operator">+</span> numb<span class="token punctuation">&#125;</span><span class="token comment">// void表示空，表示没有返回结果的函数</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">&#123;</span>    <span class="token comment">// return 123</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 函数结构声明</span><span class="token keyword">let</span> <span class="token function-variable function">d</span><span class="token operator">:</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span><span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">&#125;</span></code></pre><p>ES6中提供的解构赋值也可使用到函数声明中</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 自定义类型</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span><span class="token comment">// 解构用于函数声明</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义一个对象</span><span class="token keyword">const</span> obj<span class="token operator">:</span><span class="token constant">C</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">:</span><span class="token string">'1'</span><span class="token punctuation">,</span>    b<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre><h3 id="对象声明"><a href="#对象声明" class="headerlink" title="对象声明"></a>对象声明</h3><p>用<code>object</code> 表示一个js对象</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> a<span class="token operator">:</span>object<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// &#123;&#125;用来指定对象中包含的属性</span><span class="token keyword">let</span> b<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>sex<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">&#125;</span> <span class="token comment">// ？表示属性可选择</span>b <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">"孙悟空"</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">&#125;</span>b <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">"孙悟空"</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>sex<span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">&#125;</span><span class="token comment">// 添加任意属性</span><span class="token keyword">let</span> c<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>propName<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">&#125;</span>c <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'猪八戒'</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>sex<span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">&#125;</span></code></pre><h2 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a>编译选项</h2><h3 id="正常编译ts文件"><a href="#正常编译ts文件" class="headerlink" title="正常编译ts文件"></a>正常编译ts文件</h3><pre class="language-none"><code class="language-none">tsc app.ts</code></pre><p>每次修改ts代码后，都需要手动编译</p><h3 id="ts文件监视，自动编译"><a href="#ts文件监视，自动编译" class="headerlink" title="ts文件监视，自动编译"></a>ts文件监视，自动编译</h3><pre class="language-none"><code class="language-none">tsc app.ts -w</code></pre><p>监听文件变化，每当文件变化，就会自动编译</p><h3 id="使用tsc直接编译所有ts文件"><a href="#使用tsc直接编译所有ts文件" class="headerlink" title="使用tsc直接编译所有ts文件"></a>使用tsc直接编译所有ts文件</h3><p>在项目文件夹下创建  <code>tsconfig.json</code><br>然后就可以使用tsc命令直接编译全部ts文件，还可以使用tsc -w 监视全局文件</p><p><code>tsconfig.json</code>是ts编译器的配置文件，ts编译器可以根据它的配置信息对代码进行编译</p><p>下面是一些常用配置</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token comment">/*  "include" 指定那些ts文件需要被编译,      /** 表示任意目录      /* 表示任意文件  "exclude" 指定排除那些文件或文件夹      默认值：["node_modules","bower_components","jspm_packages"]  */</span>  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"./src/**/*"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//  "exclude": [</span><span class="token comment">//    "./src/*"</span><span class="token comment">//  ]</span>  <span class="token comment">/*    compilerOptions 编译器选项  */</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES6"</span><span class="token punctuation">,</span> <span class="token comment">//target用来指定ts被编译成es的版本</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"ES6"</span><span class="token punctuation">,</span> <span class="token comment">// 指定模块化的规范</span>    <span class="token comment">// lib用来指定项目中会使用到的库</span><span class="token comment">//    "lib": [</span><span class="token comment">//      "dom"</span><span class="token comment">//    ]</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span> <span class="token comment">//指定编译文件所在的目录</span>    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否编译js文件，默认false</span>    <span class="token property">"checkJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//检查js代码是否符合语法规范</span>    <span class="token property">"removeComments"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否移除注释</span>    <span class="token property">"noEmit"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//是否生成编译文件</span>    <span class="token property">"noEmitOnError"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 当有错误时不生成编译后的文件</span>    <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//所有严格检查总开关</span>    <span class="token property">"alwaysStrict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否使用严格模式，默认false</span>    <span class="token property">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//不允许使用隐式any</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>配置<code>tsconfig.json</code>后，便可以直接使用tsc命令编译配置文件夹下的所有ts文件，还可以使用<code>tsc -w</code>监听全局文件。</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>TypeScript 是面向对象的 JavaScript。类描述了所创建的对象共同的属性和方法。TypeScript 支持面向对象的所有特性，比如 类、接口等。</p><h3 id="类的简介"><a href="#类的简介" class="headerlink" title="类的简介"></a>类的简介</h3><p>使用class关键字定义一个类，使用 new 关键字来实例化类的对象</p><p>对象包含 <code> 属性</code>  和 <code>方法</code> 两个部分</p><p>属性主要分为实例属性和静态属性</p><p>直接定义的属性叫做实例属性，实例属性只能通过 new 实例的方式使用 </p><p>例：<code>const person = new Person();</code></p><p>使用static关键字描述的属性为静态属性，静态属性可直接通过类名访问</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 实例属性</span>    name<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"赵久燚"</span>    age<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">21</span>    <span class="token comment">// readonly关键字表示只读属性  该属性不能修改</span>    <span class="token keyword">readonly</span> sex<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"男"</span>    <span class="token comment">// 静态属性</span>    <span class="token keyword">static</span> myName<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"赵久燚"</span>    <span class="token comment">// 定义方法</span>    <span class="token comment">// 实例方法，通过实例进行使用</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"实例方法：hello!"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 类方法,通过类名直接进行使用</span>    <span class="token keyword">static</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"静态方法：hi!"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"实例属性"</span><span class="token punctuation">,</span>per<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"静态属性"</span><span class="token punctuation">,</span>Person<span class="token punctuation">.</span>myName<span class="token punctuation">)</span>per<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Person<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// per.sex = "女" //报错</span><span class="token comment">// 修改属性</span>per<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">22</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>per<span class="token punctuation">.</span>age<span class="token punctuation">)</span></code></pre><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>类的构造函数:<code>constructor</code>只在实例化的时候被调用，并且<strong>只调用一次</strong>。<br>类的<code>constructor</code>在类的外部无法访问。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    <span class="token comment">// 构造函数 constructor,在对象创建时调用</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token punctuation">&#125;</span>    <span class="token function">dark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">在汪汪叫！</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token comment">// 在方法中可以通过this指向当前实例本身</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment">//打印当前实例</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用new关键字实例化类得到一个dog对象</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用对象方法</span>dog<span class="token punctuation">.</span><span class="token function">dark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 打印： 旺财在汪汪叫</span></code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>TypeScript 支持继承类，即我们可以在创建类的时候继承一个已存在的类，这个已存在的类称为父类，继承它的类称为子类</p><p>基于类的程序设计中一种最基本的模式是允许使用继承来扩展现有的类</p><p>类继承使用关键字 <strong>extends</strong></p><p><strong>实例</strong></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 定义一个animal公共类</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 构造函数的语法糖，在构造函数中添加修饰符，可省去`this.name = name`类似语法</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">public</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:hello!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义一个Sheep类继承animal类 , 此时Sheep为子类，animal为父类，子类拥有父类所有属性和方法</span><span class="token keyword">class</span> <span class="token class-name">Sheep</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 为sheep添加一个新的方法</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">正在吃草</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 除了添加新的方法，我们还可以重写sayHello方法</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">"咪咪咪"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"小猫"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> sheep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span><span class="token string">"小阳"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>sheep<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>sheep<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>先定义一个父类</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal1</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">&#125;</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>当我们想要继承这个个父类时，子类无法使用构造函数，就像这样</p><p><img src="/2022/07/25/TypeScript%E5%9F%BA%E7%A1%80/image-20220725122742915.png" alt="image-20220725122742915"></p><p>与前面继承的例子的不同点是，子类包含了一个构造函数，它 <em>必须</em>调用 <code>super()</code>，它会执行基类的构造函数。 而且，在构造函数里访问 <code>this</code>的属性之前，我们 <em>一定</em>要调用 <code>super()</code>。 这个是TypeScript强制执行的一条重要规则。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 在类的方法中，super表示当前类的父类</span><span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token keyword">extends</span> <span class="token class-name">Animal1</span><span class="token punctuation">&#123;</span>    age<span class="token operator">:</span> <span class="token builtin">number</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 如果在子类中写了构造函数，此时子类的构造函数必须对父类的构造函数进行调用</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父类的构造函数</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token punctuation">&#125;</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> bird <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token string">"小鸟"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类使用<code>abstract</code>进行描述</p><p>抽象类与其他类的区别不大，但是只能用于继承，不能用来创建对象。</p><p>抽象类中可以定义抽象方法（抽象方法不能有方法体），子类必须对抽象方法进行重写。</p><p>定义一个抽象类</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>     name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>     <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token comment">/*     * 定义一个抽象方法     * 抽象方法使用abstract关键字，没有方法体     * 抽象方法只能定义在抽象类中，子类必须对抽象方法进行重写     * */</span>     <span class="token keyword">abstract</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre><p>定义一个类继承抽象类</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    favoriteFood<span class="token operator">:</span> <span class="token builtin">string</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>favoriteFood<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>favoriteFood <span class="token operator">=</span> favoriteFood    <span class="token punctuation">&#125;</span>    <span class="token comment">// 重写抽象类中定义的抽象方法</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">喜欢吃</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>favoriteFood<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog2</span><span class="token punctuation">(</span><span class="token string">"小狗"</span><span class="token punctuation">,</span><span class="token string">"火腿肠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 小狗喜欢吃火腿肠</span>dog<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//hello!</span></code></pre><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口可以帮我们定义一个类的结构</p><p>接口只定义对象的结构，不考虑实际值</p><p>接口中的所有属性都不能有实际的值</p><p>接口和抽象类类似，但是抽象类中可以添加抽象方法，而接口中默认全部都是抽象方法</p><p>在定义类时，可以使用<code>implements</code>关键字对接口 进行实现</p><p><strong>使用接口定义一个类结构</strong></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">myInter</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>定义一个类用来实现接口</strong></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">implements</span> <span class="token class-name">myInter</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">&#125;</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hi~~~~</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>可选属性</strong></p><p>有时候，接口里的属性不一定全都是必需的，可以通过<code>?</code>添加可选属性</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">myInter</span><span class="token punctuation">&#123;</span>    name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 此时，实现myInter接口的类可以选择不用实现name属性</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>可选属性的好处之一是可以对可能存在的属性进行预定义，好处之二是可以捕获引用了不存在的属性时的错误。</p><h3 id="属性封装"><a href="#属性封装" class="headerlink" title="属性封装"></a>属性封装</h3><p>TS中可以添加属性的修饰符</p><p>public(不添加修饰符时，默认为public) 公共的，修饰的属性可以在任意位置修改，包括子类</p><p>private 私有属性，只能在类内部进行访问（修改）</p><p>protected 受保护的类，只能在当前类和当前类的子类中使用</p><p>getter和setter方法为属性的存取器，可以通过get 和 set 方法修改或获取属性值</p><p>通过get set方法可以控制属性的合法性。</p><p><strong>实例</strong></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> _name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> _age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    <span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">set</span> <span class="token function">age</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 控制年龄合法性</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_age <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// person2.name = '猪八戒'  // 报错</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"猪八戒"</span>person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">123</span> <span class="token comment">// 年龄不合法，不能修改</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>在定义函数或类时，如果遇到类型不明确时可以使用泛型</p><p>泛型是一种特殊的变量，用来表示类型，而不是值</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 这里的T就是一个泛型</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fn</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">&#125;</span><span class="token comment">// 不指定泛型，TS自动对类型进行推断</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token comment">// 手动指定泛型</span><span class="token generic-function"><span class="token function">fn</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>还可以指定多个泛型</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">f</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">U</span><span class="token punctuation">,</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>num<span class="token operator">:</span><span class="token constant">U</span><span class="token punctuation">,</span>str<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">U</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> num<span class="token punctuation">&#125;</span><span class="token generic-function"><span class="token function">f</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span><span class="token builtin">string</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"20"</span><span class="token punctuation">)</span></code></pre><p>限定泛型的范围，定义一个接口来描述约束条件</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Inter</span> <span class="token punctuation">&#123;</span>    length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 表示泛型T必须是Inter的一个实现类、子类</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">f1</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Inter<span class="token operator">></span></span></span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>length<span class="token punctuation">&#125;</span><span class="token comment">//f1(123) //报错，应为数值类型没有length属性</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span></code></pre><p>在类中也可以使用泛型</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">MyClass<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> TypeScript </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy数据爬取</title>
      <link href="/2022/06/14/spiderWork/"/>
      <url>/2022/06/14/spiderWork/</url>
      
        <content type="html"><![CDATA[<h2 id="scrapy简介"><a href="#scrapy简介" class="headerlink" title="scrapy简介"></a>scrapy简介</h2><p> <a href='https://www.osgeo.cn/scrapy/'>中文文档</a></p><p>下图显示了Scrapy架构及其组件的概述，以及系统内部发生的数据流的概要（以红色箭头显示）。</p><p>提供了这些组件的简要说明以及有关它们的详细信息的链接。数据流也描述如下。</p><p><img src="/2022/06/14/spiderWork/image-20220614180336094.png" alt="image-20220614180336094"></p><ul><li><p><strong>Scrapy Engine(引擎)</strong>: 负责Spider、ItemPipeline、Downloader、Scheduler中间的通讯，信号、数据传递等。</p></li><li><p><strong>Scheduler(调度器)</strong>: 它负责接受引擎发送过来的Request请求，并按照一定的方式进行整理排列，入队，当引擎需要时，交还给引擎。</p></li><li><p><strong>Downloader（下载器）</strong>：负责下载Scrapy Engine(引擎)发送的所有Requests请求，并将其获取到的Responses交还给Scrapy Engine(引擎)，由引擎交给Spider来处理，</p></li><li><p><strong>Spider（爬虫）</strong>：它负责处理所有Responses,从中分析提取数据，获取Item字段需要的数据，并将需要跟进的URL提交给引擎，再次进入Scheduler(调度器).</p></li><li><p>**Item、Pipeline (管道)**：它负责处理Spider中获取到的Item，并进行进行后期处理（详细分析、过滤、存储等）的地方。</p></li><li><p><strong>Downloader Middlewares（下载中间件）</strong>：你可以当作是一个可以自定义扩展下载功能的组件。</p></li><li><p><strong>Spider Middlewares（Spider中间件）</strong>：你可以理解为是一个可以自定扩展和操作引擎和Spider中间通信的功能组件（比如进入Spider的Responses;和从Spider出去的Requests）</p></li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><strong>爬取内容</strong>： 智联招聘信息</p><p><strong>地址</strong>： <a href="https://www.zhaopin.com/">https://www.zhaopin.com/</a><a href="https://sou.zhaopin.com/">https://sou.zhaopin.com/</a></p><p><strong>爬取过程</strong>：先通过第一个网址拿到工作岗位和城市，然后在第二个网址进行招聘信息的搜索，爬取，随后存储到mysql数据库。</p><p><strong>网站分析</strong>：</p><p>打开第一个网站，选择一个招聘岗位，点击进入。</p><p><img src="/2022/06/14/spiderWork/image-20220614181653140.png" alt="image-20220614181653140"></p><p><img src="/2022/06/14/spiderWork/image-20220614181754258.png" alt="image-20220614181754258"></p><p>注意看网址，域名后面有一个<code>jl=601</code>和<code>kw=Java开发</code>，前面的601是城市编号，后面的就是工作岗位了，我们把网址上的601改成具体的城市名称，发现也可以拿到信息，那就节省了很多时间。回到首页，可以看到列出了很多工作岗位和城市（首页往下翻就能看到城市）。</p><p>所以，只需要在首页拿到工作岗位和城市名称，然后拼接成一个搜索链接，我们就能拿到想要的招聘信息。</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><strong>环境</strong> ：python3</p><p>首先安装scrapy</p><pre class="language-python" data-language="python"><code class="language-python">pip install scrapy <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>simple</code></pre><p>创建scrapy项目，项目名为<code>spiderWorkScrapy</code>，可自定义</p><pre class="language-python" data-language="python"><code class="language-python">scrapy startproject spiderWorkScrapy</code></pre><p>此时生成了一个项目文件夹。进入可看到</p><p><img src="/2022/06/14/spiderWork/image-20220614190216583.png" alt="image-20220614190216583"></p><h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><p>建议每个python项目都创建一个独立的虚拟环境</p><p>使用pycharm打开scrapy项目，打开设置，项目，python解释器，左上角的设置按钮点击添加。创建的虚拟环境放在项目目录。创建成功后点击pycharm底部的终端，显示venv字样说明虚拟环境启动成功（部分不成功的例子上网查询结果很多，这里就不做阐述了）。</p><p><img src="/2022/06/14/spiderWork/image-20220614200134522.png" alt="image-20220614200134522"></p><p>由于我们的虚拟环境是与其他环境隔离的，所以我们需要重新安装scrapy。</p><h2 id="爬取岗位和城市"><a href="#爬取岗位和城市" class="headerlink" title="爬取岗位和城市"></a>爬取岗位和城市</h2><p>在项目目录下打开终端，输入<code>scrapy genspider getjobsinfo &#39;www.zhaopin.com&#39;</code></p><p>可以看到在spiders包下创建了一个<code>getjobsinfo</code>的pyhthon文件，这就是刚刚创建的爬虫。</p><p>编写代码如下</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scrapy <span class="token keyword">import</span> Request<span class="token punctuation">,</span> Selector<span class="token keyword">class</span> <span class="token class-name">GetjobsinfoSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'getjobsinfo'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'zhaopin.com'</span><span class="token punctuation">]</span>    <span class="token comment"># start_urls = ['https://www.zhaopin.com/']</span>    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#  提交爬取路径交给引擎，开始爬取</span>        <span class="token keyword">yield</span> Request<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'https://www.zhaopin.com/'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#  拿到响应体 使用xpath解析数据</span>        jobs_list <span class="token operator">=</span> Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>            <span class="token string">"//a[@class='zp-jobNavigater__pop--href']/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 工作列表</span>        citys_list <span class="token operator">=</span> Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>  <span class="token comment">#   城市列表</span>            <span class="token string">"//div[@class='footerFuncCity clearfix']/ul/li/strong/a/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>jobs_list<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>citys_list<span class="token punctuation">)</span></code></pre><h2 id="中间件集成selenium"><a href="#中间件集成selenium" class="headerlink" title="中间件集成selenium"></a>中间件集成selenium</h2><p>第一个页面不是动态的，所以可以直接爬取，但是第二个页面是动态的，所以需要使用selenium帮助我们爬取。</p><p>可以选择在中间件进行集成。打开<code>middlewares.py</code>，编辑<code>SipderworkscrapyDownloaderMiddleware</code>类。修改如下内容。</p><p><strong>实现思路</strong>：拿到响应体后，使用BeautifulSoup解析出网页的文本，如果文本数量小于200，就使用selenium重新爬取。</p><p>先要在虚拟环境中安装<code>BeautifulSoup</code>和<code>selenium</code>，同时将Chrome驱动放入虚拟环境下的python根目录。</p><p><code>pip install BeautifulSoup -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p><p><code>pip install selenium -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>http <span class="token keyword">import</span> HtmlResponse<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>common <span class="token keyword">import</span> TimeoutException<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">class</span> <span class="token class-name">SipderworkscrapyDownloaderMiddleware</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 在初始化方法中创建Chrome实例</span>        options <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>        options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--headless'</span><span class="token punctuation">)</span>  <span class="token comment"># 设置无界面</span>        self<span class="token punctuation">.</span>webdriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>options<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关闭窗口</span>        self<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关闭浏览器</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment"># 提取响应体文本</span>            pure_text <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pure_text<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Chrome driver begin...'</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span>                <span class="token comment"># wait = WebDriverWait(self.webdriver, timeout=20)</span>                <span class="token keyword">return</span> HtmlResponse<span class="token punctuation">(</span>url<span class="token operator">=</span>response<span class="token punctuation">.</span>url<span class="token punctuation">,</span> body<span class="token operator">=</span>self<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>page_source<span class="token punctuation">,</span>                                    encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token comment"># 返回selenium渲染之后的HTML数据</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> response        <span class="token keyword">except</span> TimeoutException<span class="token punctuation">:</span>            <span class="token keyword">return</span> HtmlResponse<span class="token punctuation">(</span>url<span class="token operator">=</span>response<span class="token punctuation">.</span>url<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">)</span>        <span class="token keyword">finally</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Chrome driver end...'</span><span class="token punctuation">)</span></code></pre><p>中间件修改完成后在<code>settings.py</code>中设置使用我们修改过的中间件， 设置里默认有写，取消注释即可，<code>SipderworkscrapyDownloaderMiddleware</code>是中间件的类名。</p><pre class="language-python" data-language="python"><code class="language-python">DOWNLOADER_MIDDLEWARES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token string">'sipderWorkScrapy.middlewares.SipderworkscrapyDownloaderMiddleware'</span><span class="token punctuation">:</span> <span class="token number">543</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><h2 id="item接收数据"><a href="#item接收数据" class="headerlink" title="item接收数据"></a>item接收数据</h2><p>爬取到的数据需要使用item进行接收，以便进行下一步处理，在<code>items.py</code>中添加一个item。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">JobInfo</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    job_name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 岗位名称</span>    job_salary <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 薪资范围</span>    job_place <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 工作地点</span>    job_experience <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 经验要求</span>    job_education <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 学历要求</span>    job_tag <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 岗位标签</span>    company_name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 公司名称</span>    company_type <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 企业类型</span>    company_scale <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 企业规模</span>    link <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 链接</span></code></pre><h2 id="爬取招聘信息"><a href="#爬取招聘信息" class="headerlink" title="爬取招聘信息"></a>爬取招聘信息</h2><p>遍历上面得到的岗位列表和城市列表，拼接url，提交给引擎进行下一步爬取。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> job <span class="token keyword">in</span> jobs_list<span class="token punctuation">:</span>    <span class="token keyword">for</span> city <span class="token keyword">in</span> citys_list<span class="token punctuation">:</span>        <span class="token comment"># 提交一个Request给引擎</span>        <span class="token keyword">yield</span> Request<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f'http://sou.zhaopin.com/?jl=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>city<span class="token punctuation">&#125;</span></span><span class="token string">&amp;kw=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>job<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span> </code></pre><p>这里有一个问题，下载到的页面还会使用当前的parse方法解析数据，这并不是我们所期望的，所以要在这里添加一个回调，使用其他方法解析这个<code>Request</code>，所以需要再写一个回调方法，使用该回调方法解析下一步的数据。</p><p>同时在该回调方法里解析数据，然后用item接收。</p><p>修改<code>getjobsinfo.py</code>的代码为</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy <span class="token keyword">import</span> Request<span class="token punctuation">,</span> Selector<span class="token keyword">from</span> sipderWorkScrapy<span class="token punctuation">.</span>items <span class="token keyword">import</span> JobInfo<span class="token keyword">class</span> <span class="token class-name">GetjobsinfoSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'getjobsinfo'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'zhaopin.com'</span><span class="token punctuation">]</span>    <span class="token comment"># start_urls = ['https://www.zhaopin.com/']</span>    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> Request<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'https://www.zhaopin.com/'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        jobs_list <span class="token operator">=</span> Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>            <span class="token string">"//a[@class='zp-jobNavigater__pop--href']/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 工作列表</span>        citys_list <span class="token operator">=</span> Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>            <span class="token string">"//div[@class='footerFuncCity clearfix']/ul/li/strong/a/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 工作地点</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>jobs_list<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>citys_list<span class="token punctuation">)</span>        <span class="token keyword">for</span> job <span class="token keyword">in</span> jobs_list<span class="token punctuation">:</span>            <span class="token keyword">for</span> city <span class="token keyword">in</span> citys_list<span class="token punctuation">:</span>                url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'http://sou.zhaopin.com/?jl=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>city<span class="token punctuation">&#125;</span></span><span class="token string">&amp;kw=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>job<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>                <span class="token keyword">yield</span> Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>jobs_parse<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">jobs_parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        doms <span class="token operator">=</span> Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>            <span class="token string">"//*[@id='positionList-hook']/div/div[@class='joblist-box__item clearfix']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> dom <span class="token keyword">in</span> doms<span class="token punctuation">:</span>            job_name <span class="token operator">=</span> Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>dom<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                <span class="token string">"//span[@class='iteminfo__line1__jobname__name']/@title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 岗位名称</span>            job_salary <span class="token operator">=</span> Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>dom<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                <span class="token string">"//p[@class='iteminfo__line2__jobdesc__salary']/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 薪资范围</span>            job_place <span class="token operator">=</span> Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>dom<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                <span class="token string">"//ul[@class='iteminfo__line2__jobdesc__demand']/li[1]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 工作地点</span>            job_experience <span class="token operator">=</span> Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>dom<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                <span class="token string">"//ul[@class='iteminfo__line2__jobdesc__demand']/li[2]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 经验要求</span>            job_education <span class="token operator">=</span> Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>dom<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                <span class="token string">"//ul[@class='iteminfo__line2__jobdesc__demand']/li[3]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 学历要求</span>            job_tag <span class="token operator">=</span> Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>dom<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                <span class="token string">"//div[@class='iteminfo__line3__welfare']/div/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 岗位标签</span>            company_name <span class="token operator">=</span> Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>dom<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                <span class="token string">"//span[@class='iteminfo__line1__compname__name']/@title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 公司名称</span>            company_type <span class="token operator">=</span> Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>dom<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                <span class="token string">"//div[@class='iteminfo__line2__compdesc']/span[1]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 企业类型</span>            company_scale <span class="token operator">=</span> Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>dom<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                <span class="token string">"//div[@class='iteminfo__line2__compdesc']/span[2]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 企业规模</span>            link <span class="token operator">=</span> Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>dom<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                <span class="token string">"//a[@class='joblist-box__iteminfo iteminfo']/@href"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 岗位链接</span>            job_info <span class="token operator">=</span> JobInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>            job_info<span class="token punctuation">[</span><span class="token string">'job_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> job_name            job_info<span class="token punctuation">[</span><span class="token string">'job_salary'</span><span class="token punctuation">]</span> <span class="token operator">=</span> job_salary            job_info<span class="token punctuation">[</span><span class="token string">'job_place'</span><span class="token punctuation">]</span> <span class="token operator">=</span> job_place            job_info<span class="token punctuation">[</span><span class="token string">'job_experience'</span><span class="token punctuation">]</span> <span class="token operator">=</span> job_experience            job_info<span class="token punctuation">[</span><span class="token string">'job_education'</span><span class="token punctuation">]</span> <span class="token operator">=</span> job_education            job_info<span class="token punctuation">[</span><span class="token string">'job_tag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> job_tag            job_info<span class="token punctuation">[</span><span class="token string">'company_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> company_name            job_info<span class="token punctuation">[</span><span class="token string">'company_type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> company_type            job_info<span class="token punctuation">[</span><span class="token string">'company_scale'</span><span class="token punctuation">]</span> <span class="token operator">=</span> company_scale            job_info<span class="token punctuation">[</span><span class="token string">'link'</span><span class="token punctuation">]</span> <span class="token operator">=</span> link            <span class="token comment"># 将数据提交</span>            <span class="token keyword">yield</span> job_info</code></pre><h2 id="保存招聘信息"><a href="#保存招聘信息" class="headerlink" title="保存招聘信息"></a>保存招聘信息</h2><p>使用<code>peewee</code>保存招聘信息，在管道进行处理。</p><p>创建一个<code>Model.py</code>编写代码如下</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> peewee <span class="token keyword">import</span> <span class="token operator">*</span>db <span class="token operator">=</span> MySQLDatabase<span class="token punctuation">(</span><span class="token string">'数据库名称'</span><span class="token punctuation">,</span>                   host<span class="token operator">=</span><span class="token string">"主机地址"</span><span class="token punctuation">,</span>                   port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>  <span class="token comment"># 端口 默认3306</span>                   user<span class="token operator">=</span><span class="token string">"账户名"</span><span class="token punctuation">,</span>                   password<span class="token operator">=</span><span class="token string">"密码"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">DataModel</span><span class="token punctuation">(</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        database <span class="token operator">=</span> db<span class="token keyword">class</span> <span class="token class-name">JobsInfo</span><span class="token punctuation">(</span>DataModel<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 招聘岗位</span>    job_name <span class="token operator">=</span> CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token string">"255"</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">"岗位名称"</span><span class="token punctuation">)</span>    job_salary <span class="token operator">=</span> CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token string">"255"</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">"薪资范围"</span><span class="token punctuation">)</span>    job_place <span class="token operator">=</span> CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token string">"255"</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">"工作地点"</span><span class="token punctuation">)</span>    job_experience <span class="token operator">=</span> CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token string">"255"</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">"经验要求"</span><span class="token punctuation">)</span>    job_education <span class="token operator">=</span> CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token string">"255"</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">"学历要求"</span><span class="token punctuation">)</span>    job_tag <span class="token operator">=</span> TextField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">"岗位标签"</span><span class="token punctuation">)</span>    company_name <span class="token operator">=</span> CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token string">"255"</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">"公司名称"</span><span class="token punctuation">)</span>    company_type <span class="token operator">=</span> CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token string">"255"</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">"公司类型"</span><span class="token punctuation">)</span>    company_scale <span class="token operator">=</span> CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token string">"255"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">"企业规模"</span><span class="token punctuation">)</span>    link <span class="token operator">=</span> TextField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">"岗位链接"</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>create_tables<span class="token punctuation">(</span><span class="token punctuation">[</span>JobsInfo<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>打开<code>piplines.py</code>，编辑如下信息</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sipderWorkScrapy<span class="token punctuation">.</span>Model <span class="token keyword">import</span> JobsInfo<span class="token comment"># 使用mysql存储招聘数据</span><span class="token keyword">class</span> <span class="token class-name">JobsInfoPipline</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment"># 处理提交的item</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            job_info <span class="token operator">=</span> JobsInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>            job_info<span class="token punctuation">.</span>job_name <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'job_name'</span><span class="token punctuation">]</span>            job_info<span class="token punctuation">.</span>job_salary <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'job_salary'</span><span class="token punctuation">]</span>            job_info<span class="token punctuation">.</span>job_place <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'job_place'</span><span class="token punctuation">]</span>            job_info<span class="token punctuation">.</span>job_experience <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'job_experience'</span><span class="token punctuation">]</span>            job_info<span class="token punctuation">.</span>job_education <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'job_education'</span><span class="token punctuation">]</span>            job_info<span class="token punctuation">.</span>job_tag <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'job_tag'</span><span class="token punctuation">]</span>            job_info<span class="token punctuation">.</span>company_name <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'company_name'</span><span class="token punctuation">]</span>            job_info<span class="token punctuation">.</span>company_type <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'company_type'</span><span class="token punctuation">]</span>            job_info<span class="token punctuation">.</span>company_scale <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'company_scale'</span><span class="token punctuation">]</span>            job_info<span class="token punctuation">.</span>link <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'link'</span><span class="token punctuation">]</span>            job_info<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>item<span class="token punctuation">[</span><span class="token string">'job_name'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">保存成功"</span></span><span class="token punctuation">)</span>        <span class="token keyword">except</span> <span class="token punctuation">(</span>IndexError<span class="token punctuation">,</span> TypeError<span class="token punctuation">,</span> TimeoutError<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"保存失败"</span><span class="token punctuation">)</span></code></pre><p>最后在settings.py下启动这个管道。</p><pre class="language-python" data-language="python"><code class="language-python">ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token string">'sipderWorkScrapy.pipelines.JobsInfoPipline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p>大功告成！！！！</p><p>打开python控制台，输入<code>scrapy crawl getjobsinfo</code>启动我们的爬虫。可以看到数据已经被爬取下来了</p><p><img src="/2022/06/14/spiderWork/image-20220615230319768.png" alt="image-20220615230319768"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
            <tag> selenium </tag>
            
            <tag> peewee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mockjs基本使用</title>
      <link href="/2022/06/05/mockjs%E5%85%A5%E9%97%A8/"/>
      <url>/2022/06/05/mockjs%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="mockjs简介"><a href="#mockjs简介" class="headerlink" title="mockjs简介"></a>mockjs简介</h2><p>官方文档 <a href="http://mockjs.com/">http://mockjs.com/</a></p><h3 id="mockjs两大特性"><a href="#mockjs两大特性" class="headerlink" title="mockjs两大特性"></a>mockjs两大特性</h3><p><strong>数据类型丰富</strong><br>可以生成随机的文本、数字、布尔值、日期、邮箱、链接、图片、颜色等。</p><p><strong>拦截 Ajax 请求</strong><br>不需要修改既有代码，即可以拦截 Ajax 请求，并返回模拟的响应数据。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>在实际的开发过程中，有时候后端接口还未开发完成，而前端又不想写静态页面，为了不影响前端开发进度。我们就可以使用mockjs进行后端接口和数据的模拟，mockjs可以拦截前端的ajax请求并返回生成的随机数据，以达到模拟后端接口的效果。</p><p>当后端接口开发完成时，我们只需要取消mockjs的拦截作用，便能访问到真实的后端接口，并拿到后端真实的数据。</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>首先我们电脑上需要安装nodejs，为我们提供本地运行环境</p><p>现在开始创建项目</p><h3 id="WebStrom创建"><a href="#WebStrom创建" class="headerlink" title="WebStrom创建"></a>WebStrom创建</h3><p>注：本文使用WebStrom作为开发工具，没有WebStrom的同学请跳过本小结，下一小节介绍其他方式创建项目。</p><p>文件 → 新建 → 项目，选择nodejs，设置项目文件夹（文件夹为空），配置解释器和包管理器，这些只要安装了且正确配置了nodejs，WebStrom都会自动配置。下一步创建。</p><p><img src="/2022/06/05/mockjs%E5%85%A5%E9%97%A8/image-20220605223837238.png" alt="image-20220605223837238"></p><p>在打开的项目中我们能看到一个<code>package.json</code>文件,在里面添加如下依赖</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"mockjs"</span><span class="token operator">:</span> <span class="token string">"^1.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"require"</span><span class="token operator">:</span> <span class="token string">"^2.4.20"</span> <span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/06/05/mockjs%E5%85%A5%E9%97%A8/image-20220605225825128.png" alt="image-20220605225825128"></p><p>然后打开终端，运行<code>npm install</code>导入依赖，如下图表示成功，接下来会在项目根目录多出一个node_modules文件夹。此时我们的运行环境便搭建好了。</p><p><img src="/2022/06/05/mockjs%E5%85%A5%E9%97%A8/image-20220605224536800.png" alt="image-20220605224536800"></p><h3 id="其他方式创建"><a href="#其他方式创建" class="headerlink" title="其他方式创建"></a>其他方式创建</h3><p>首先我们在目录下创建一个空文件夹，然后进入文件夹，在地址栏输入cmd，回车，即可使用命令行进行项目的创建。</p><p><img src="/2022/06/05/mockjs%E5%85%A5%E9%97%A8/image-20220605225155091.png" alt="image-20220605225155091"></p><p>在打开的cmd命令窗口中，我们输入<code>npm init</code>，关于项目一些配置暂时先不用管，这里直接一路回车</p><p><img src="/2022/06/05/mockjs%E5%85%A5%E9%97%A8/image-20220605225450717.png" alt="image-20220605225450717"></p><p>此时回到刚刚创建的文件夹下，刚刚的cmd窗口先不要关，可以看到生成了一个package.json文件，使用编辑器打开（记事本，sublime皆可），在里面添加如下内容</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"mockjs"</span><span class="token operator">:</span> <span class="token string">"^1.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"require"</span><span class="token operator">:</span> <span class="token string">"^2.4.20"</span>  <span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/06/05/mockjs%E5%85%A5%E9%97%A8/image-20220605230213997.png" alt="image-20220605230213997"></p><p>保存后继续回到cmd窗口，运行<code>npm install</code>导入相关依赖，完成后可以看到项目根目录下创建了node_modules文件，现在环境就搭建完成了，开始使用mockjs。</p><h2 id="hello-mockjs"><a href="#hello-mockjs" class="headerlink" title="hello mockjs"></a>hello mockjs</h2><p>在项目下创建 mock.js，编写如下代码</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Mock <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mockjs"</span><span class="token punctuation">)</span><span class="token keyword">let</span> data <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string-property property">"data"</span><span class="token operator">:</span> <span class="token string">"hello mockjs!"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><p>运行可以看到如下结果</p><p><img src="/2022/06/05/mockjs%E5%85%A5%E9%97%A8/image-20220605230629776.png" alt="image-20220605230629776"></p><p>使用cmd进入项目根目录，通过<code>node mock.js</code>命令我们也可以运行mock.js文件，下同</p><p><img src="/2022/06/05/mockjs%E5%85%A5%E9%97%A8/image-20220605230804768.png" alt="image-20220605230804768"></p><p>当然，这样的数据肯定不能满足我们的需求</p><h2 id="数据模板"><a href="#数据模板" class="headerlink" title="数据模板"></a>数据模板</h2><h3 id="常用api"><a href="#常用api" class="headerlink" title="常用api"></a>常用api</h3><p><strong>Mock.mock(url, type, data)</strong></p><table><thead><tr><th align="center">参数名</th><th align="center">描述</th><th align="center">例子</th></tr></thead><tbody><tr><td align="center">url</td><td align="center">非必填，需要拦截的ajax请求地址</td><td align="center">&#x2F;login, &#x2F;mock&#x2F;getdata</td></tr><tr><td align="center">type</td><td align="center">非必填，请求类型</td><td align="center">post,get</td></tr><tr><td align="center">data</td><td align="center">非必填，返回的响应数据</td><td align="center">对象或字符串</td></tr></tbody></table><h3 id="数据生成"><a href="#数据生成" class="headerlink" title="数据生成"></a>数据生成</h3><p>使用require导入mockjs</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Mock <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mockjs"</span><span class="token punctuation">)</span></code></pre><h4 id="自定义字符串"><a href="#自定义字符串" class="headerlink" title="自定义字符串"></a>自定义字符串</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// key|规则：value  </span><span class="token keyword">let</span> data1 <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">//生成s个”测试文字“字符串</span>    <span class="token string-property property">"data|3"</span><span class="token operator">:</span><span class="token string">"测试文字。"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token comment">/*** &#123; data: '测试文字。测试文字。测试文字。' &#125;*/</span><span class="token keyword">let</span> data2 <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">"String|1-4"</span><span class="token operator">:</span><span class="token string">"测试文字"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token comment">// 随机生成1-4个”测试文字“字符串</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token comment">/*** &#123; data: '测试文字。测试文字。' &#125;*/</span></code></pre><h4 id="随机字符串"><a href="#随机字符串" class="headerlink" title="随机字符串"></a>随机字符串</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> data <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string-property property">"data1"</span><span class="token operator">:</span><span class="token string">"@cword"</span><span class="token punctuation">,</span> <span class="token comment">//单个字符</span>    <span class="token string-property property">"data2"</span><span class="token operator">:</span><span class="token string">"@cword(4)"</span><span class="token punctuation">,</span> <span class="token comment">//指定长度字符串</span>    <span class="token string-property property">"data23"</span><span class="token operator">:</span><span class="token string">"@cword(4,8)"</span> <span class="token comment">//指定长度范围字符串</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment">/*** &#123; data1: '干', data2: '派管据制', data23: '每调今要行' &#125;*/</span></code></pre><h4 id="随机省份"><a href="#随机省份" class="headerlink" title="随机省份"></a>随机省份</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> data <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">//生成随机省份</span>    <span class="token string-property property">"province"</span><span class="token operator">:</span><span class="token string">"@province"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">//&#123; province: '新疆维吾尔自治区' &#125;</span><span class="token comment">// 这个示例只返回对应的value，而不是对象，可根据不同需求进行使用，其他模板也可以这样使用</span><span class="token comment">// 下面就不再进行演示了</span><span class="token keyword">let</span> province <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">"@province"</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>province<span class="token punctuation">)</span> <span class="token comment">//贵州省</span></code></pre><h4 id="标题和句子"><a href="#标题和句子" class="headerlink" title="标题和句子"></a>标题和句子</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> data <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string-property property">"data1"</span><span class="token operator">:</span><span class="token string">"@ctitle"</span><span class="token punctuation">,</span> <span class="token comment">//标题</span>    <span class="token string-property property">"data2"</span><span class="token operator">:</span><span class="token string">"@csentence"</span><span class="token punctuation">,</span> <span class="token comment">//句子</span>    <span class="token string-property property">"data3"</span><span class="token operator">:</span><span class="token string">"@ctitle(10)"</span><span class="token punctuation">,</span> <span class="token comment">//指定长度标题</span>    <span class="token string-property property">"data4"</span><span class="token operator">:</span><span class="token string">"@csentence(50)"</span><span class="token punctuation">,</span> <span class="token comment">//指定长度句子</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 除了指定长度，指定范围同样可用，语法与前面一致</span></code></pre><h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> data <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string-property property">"data1"</span><span class="token operator">:</span><span class="token string">"@cparagraph"</span><span class="token punctuation">,</span> <span class="token comment">//段落</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="图片地址"><a href="#图片地址" class="headerlink" title="图片地址"></a>图片地址</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> data <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string-property property">"image"</span><span class="token operator">:</span> <span class="token string">"@image('1000x1000', '#ffffff', '#df7bad', 'hello-mockjs')"</span>    <span class="token comment">//可选参数 尺寸、背景色、文字颜色、文字内容</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="随机时间"><a href="#随机时间" class="headerlink" title="随机时间"></a>随机时间</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> data <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string-property property">"time1"</span><span class="token operator">:</span> <span class="token string">'@date()'</span><span class="token punctuation">,</span> <span class="token comment">// 年月日</span>    <span class="token string-property property">"time2"</span><span class="token operator">:</span> <span class="token string">'@date(yyyy-MM-dd hh:mm:ss)'</span>  <span class="token comment">//指定格式</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> data <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string-property property">"name"</span><span class="token operator">:</span><span class="token string">"@cname"</span><span class="token punctuation">,</span>  <span class="token comment">//姓名</span>    <span class="token string-property property">"age"</span><span class="token operator">:</span><span class="token string">"@integer(18,60)"</span><span class="token punctuation">,</span> <span class="token comment">// 指定年龄范围，也可以不指定</span>    <span class="token string-property property">"city"</span><span class="token operator">:</span><span class="token string">"@city(true)"</span><span class="token punctuation">,</span> <span class="token comment">//@ city只会生成城市，加上true则加上省，市</span>    <span class="token string-property property">"idCard"</span><span class="token operator">:</span><span class="token string">"@id"</span><span class="token punctuation">,</span>  <span class="token comment">//身份证</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="对象列表"><a href="#对象列表" class="headerlink" title="对象列表"></a>对象列表</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> data <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string-property property">"data|5"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        <span class="token string-property property">"key|+1"</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment">/*** &#123;* data: [ &#123; key: 1 &#125;, &#123; key: 2 &#125;, &#123; key: 3 &#125;, &#123; key: 4 &#125;, &#123; key: 5 &#125; ]* &#125;*/</span></code></pre><h2 id="在Vue项目中使用"><a href="#在Vue项目中使用" class="headerlink" title="在Vue项目中使用"></a>在Vue项目中使用</h2><p>打开自己的Vue项目，在src目录下创建mock文件夹，然后在文件夹下创建mock.js文件，用于编写模拟数据的代码。</p><p>添加如下代码</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">'mockjs'</span> <span class="token comment">//mock</span><span class="token keyword">let</span> data <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">"@id()"</span><span class="token punctuation">,</span> <span class="token comment">// 得到随机的id,对象</span>  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">"@cname()"</span><span class="token punctuation">,</span> <span class="token comment">// 随机生成中文名字</span>  <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">"@date()"</span><span class="token punctuation">,</span> <span class="token comment">// 随机生成日期</span>  <span class="token literal-property property">avatar</span><span class="token operator">:</span> <span class="token string">"@image('200x100', '#00405d', '#FFF', 'Mock.js')"</span><span class="token punctuation">,</span>  <span class="token comment">// => "http://dummyimage.com/200x100/00405d/FFF&amp;text=Mock.js"</span>  <span class="token comment">// description: "@paragraph()",// 描述</span>  <span class="token literal-property property">ip</span><span class="token operator">:</span> <span class="token string">"@ip()"</span><span class="token punctuation">,</span><span class="token comment">// IP地址</span>  <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">"@email()"</span> <span class="token comment">// email</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/login"</span><span class="token punctuation">,</span> <span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//拦截请求，返回模拟的响应数据</span>  <span class="token string-property property">"token"</span><span class="token operator">:</span> <span class="token string">"12asdf41asfasf2123asf4312safasdff34"</span><span class="token punctuation">,</span>  <span class="token string-property property">"data"</span> <span class="token operator">:</span> data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>其中，<code>http://localhost:8080/login</code>是我们要拦截的接口地址，<code>post</code>表示需要拦截的请求方式 。</p><p>然后在项目的main.js文件导入mock.js文件</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'@/mock/index.js/'</span></code></pre><p>然后进行测试，在页面中调用接口</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>在浏览器打开调试工具</p><p><img src="/2022/06/05/mockjs%E5%85%A5%E9%97%A8/image-20220626214643702.png" alt="image-20220626214643702"></p><p>成功！！！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> Mockjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue入门</title>
      <link href="/2022/05/28/Vue%E5%85%A5%E9%97%A8/"/>
      <url>/2022/05/28/Vue%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue简介"><a href="#Vue简介" class="headerlink" title="Vue简介"></a>Vue简介</h2><p>Vue  是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。</p><p>Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</p><p>Vue还提供了 MVVM 数据绑定和一个可组合的组件系统，具有简单、灵活的 API，其目标是通过尽可能简单的 API 实现响应式的数据绑定和可组合的视图组件。</p><p><img src="/2022/05/28/Vue%E5%85%A5%E9%97%A8/image-20220528230123499.png" alt="image-20220528230123499"></p><p>另一方面，当与<a href="https://vuejs.bootcss.com/guide/single-file-components.html">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><p>vue的主要特点</p><ul><li>轻量级的框架</li><li>双向数据绑定</li><li>指令</li><li>组件化</li><li>客户端路由</li><li>状态管理</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="cdn引入"><a href="#cdn引入" class="headerlink" title="cdn引入"></a>cdn引入</h3><pre class="language-markup" data-language="markup"><code class="language-markup">## 最新版<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> ## 指定版本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.6.14<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>官网提供的链接有时候会无法使用，可以换一个cdn，这是我在staticfile找的cdn，<a href="https://cdn.staticfile.org/vue/">传送门</a>，</p><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.6.0&#x2F;vue.js</code></pre><p><img src="/2022/05/28/Vue%E5%85%A5%E9%97%A8/image-20220529105737522.png" alt="image-20220529105737522"></p><p>搜索框输入vue，然后选择版本，将对应的链接添加到我们的script标签中即可</p><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><pre class="language-none"><code class="language-none"># 最新版npm install vue </code></pre><p>注：本教程使用cdn引入</p><h2 id="Vue实例"><a href="#Vue实例" class="headerlink" title="Vue实例"></a>Vue实例</h2><p>每一个vue的应用都是通过new创建一个新的Vue实例开始的</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token comment">//选项</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>下面创建第一个vue程序</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>第一个Vue程序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/vue/0.10.0/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;test&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">test</span><span class="token operator">:</span><span class="token string">'hello vue'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统</p><p>在上面的实例中，我们通过id名app将Vue实例挂载到一个div上，然后通过文本插值的方式将数据进行插入，当然你也可以使用class，只需要将标签赋予一个类名，然后将el属性改为“.className”即可，不过这种方法一般不建议。</p><h2 id="数据和方法"><a href="#数据和方法" class="headerlink" title="数据和方法"></a>数据和方法</h2><p>当一个Vue的实例被创建时，data对象的所有属性均被加入到Vue的响应式系统中，当属性值改变时，视图也随之相应为更新的值。</p><p>从第一个实例我们可以看到，data就是我们所说的数据对象，这里直接上官方文档</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 我们的数据对象</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token comment">// 该对象被加入到一个 Vue 实例中</span><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 获得这个实例上的 property</span><span class="token comment">// 返回源数据中对应的字段</span>vm<span class="token punctuation">.</span>a <span class="token operator">==</span> data<span class="token punctuation">.</span>a <span class="token comment">// => true</span><span class="token comment">// 设置 property 也会影响到原始数据</span>vm<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span>data<span class="token punctuation">.</span>a <span class="token comment">// => 2</span><span class="token comment">// ……反之亦然</span>data<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span>vm<span class="token punctuation">.</span>a <span class="token comment">// => 3</span></code></pre><p>在vue中，我们除了使用data定义数据对象，还能用methods定义方法基本语法为</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token function-variable function">functionName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 还可以简写为</span>        <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>那么如何使用Vue实例中的数据和方法，看如下示例</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>数据与方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/vue/2.6.0/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123;test&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123;!test?getValue():"123"&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>setValue()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;buttonName()&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;&#123;test&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">test</span><span class="token operator">:</span><span class="token string">'hello vue'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token function">buttonName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token string">"按钮"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>test<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token string">"hi Vue"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>我们通过双大括号<code>&#123;&#123;&#125;&#125;</code>在标签上进行文本插值，但是除了简单的property键值，我们还可以使用函数或者表达式，例如在本例中第二个p标签使用了三元表达式，按钮处使用了一个方法，返回了<code>按钮</code>作为button的名称。</p><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><p>在vue中，指令是指带有 v- 前缀的特殊属性，预期值是单个JavaScript表达式，首先得分清楚什么是表达式，什么是语句。</p><p>表达式是 值、变量以及运算符的组合，例如算数表达式，赋值表达式，逻辑表达式、还有三元表达式</p><pre class="language-none"><code class="language-none">x + 1 &#x2F;&#x2F;算数表达式x &#x3D; 0 &#x2F;&#x2F;赋值表达式x &gt; 1 &#x2F;&#x2F;逻辑表达式x&#x3D;&#x3D;&#x3D;0?true:false &#x2F;&#x2F;三元表达式</code></pre><p>在 HTML 中，JavaScript 语句是由 web 浏览器“执行”的“指令“。由值、运算符、表达式、关键词和注释组成。举几个例子吧</p><pre class="language-none"><code class="language-none">let x &#x3D; 1;for(i in x)&#123;&#125;console.log(x)</code></pre><p>这种便是语句。</p><p>然后介绍一下常用的指令</p><ul><li><p>v-bind：这个指令用于接收参数，并响应式的更新html属性，例如</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>！--这是常规写法--</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://blog.zhaojiuyi.top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>！--这是使用参数绑定的写法--</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>new Vue(&#123;  data: &#123;    url: 'https://blog.zhaojiuyi.top'  &#125;&#125;)</code></pre></li><li><p>v-on：这个指令用于监听DOM事件，例如点击事件</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>functionName()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--这里的functionName()则是我们写在methods里面的方法--></span></code></pre></li><li><p>v-for：这个指令用于列表渲染，可以通过for循环的方式将列表里面的所有元素渲染到网页，其语法为 v-for&#x3D;”item in items”,其中items是数组名，item是被迭代的数组元素，示例</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;item&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>除了被迭代的元素，v-for还支持第二个参数——索引，语法为 </p><p>v-for&#x3D;”（item,index）in items“</p><p>当Vue更新被渲染的元素列表时，我们需要每个节点一个key,以便Vue跟踪每个节点的身份，实现重用和重新排列现有元素。<em><strong>注：</strong></em>这个key应该是唯一的</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--参照这种写法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>（item,index）in items<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;&#123;item&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>v-show：根据传入参数的真假判断是否展示元素</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>！--当v-show为true时元素显示，为false时不显示--</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#test"</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">isShow</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>除了传入布尔值，还可以传入数字，例如1为true,0为false，除此之外，还可以传入一个变量，当变量为null，undefined或0时 ，v-show为false。</p></li><li><p>v-html：在前面我们了解到了如何使用双大括号进行数据绑定，然而双大括号会把数据解释为普通文本，当我们想要输出一段html代码时，便可以使用v-html</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;&#123;msg&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;span style="color: red;">这是一段html代码&lt;/span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/05/28/Vue%E5%85%A5%E9%97%A8/image-20220529133441330.png" alt="image-20220529133441330"></p></li><li><p>v-if,v-else,v-else-if：v-if和v-show都能用来进行条件渲染，区别在于，v-show只是控制了元素的display,元素在html加载时已经被渲染，只是进行简单的css样式切换；而v-if只在条件为真时才开始渲染元素，是真正的条件渲染，v-else和v-else-if就参照我们写其他语言时的if-else即可，v-else和v-else-if必须跟在v-if之后。<em><strong>注：</strong></em>v-else和v-else-if不是必须的，根据自己业务需求来使用</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>其中v-bind和v-on两个指令由于使用频繁，所以提供了缩写v-on缩写为@，v-bind缩写为:</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 缩写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>通过Vue的模板语法，我们能轻松的进行插值和运算，但是模版内的表达式虽然便利，但是过于复杂的逻辑会让模板过重且难以维护。vue提供了计算属性 computed，以便我们处理复杂的逻辑。</p><p>基础例子</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>计算属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/vue/2.6.0/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;&#123;testComputed&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 结果为654321 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function">testComputed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>到这里你可能会发现，使用computed和methods得到的结果是一致的。不过计算属性不同的是它基于响应式依赖进行缓存，也就是说只有在该计算属性的依赖发生改变时，计算属性才会重新求值。</p><p>从上面的例子，当我们多次访问testComputed时，计算属性会立即返回之前计算的结果，而不会再次进行计算，只有当test发生改变时，计算属性才会重新进行计算。相比使用methods，每次使用都会完整执行一次计算。</p><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><p>在实际业务场景中，我们常常有一些数据需要随着其他数据的变动而做出改变，vue提供了一种监听属性 watch 。监听属性适合用在异步或开销较大的操作。</p><p>下面是一个简单的示例</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>监听器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/vue/2.6.0/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>testWatch+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">testWatch</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">watch</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function-variable function">testWatch</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>testWatch<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/05/28/Vue%E5%85%A5%E9%97%A8/image-20220529142209303.png" alt="image-20220529142209303"></p><p>点击按钮，可以看到打印的newValue和oldValue。</p><h2 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h2><p>个人认为，组件化是vue的重点也是特色所在，通过组件化，我们能够通过编写独立或可复用的组件完成一个大型的单页面应用，同时，组件化的页面更容易维护。</p><h3 id="组件定义"><a href="#组件定义" class="headerlink" title="组件定义"></a>组件定义</h3><p>基本语法为 <strong>Vue.component(tagName, options)</strong> ，其中tagName为组件名称，类比我们用的div,span,p等，options是一个对象。</p><h4 id="全局注册组件"><a href="#全局注册组件" class="headerlink" title="全局注册组件"></a>全局注册组件</h4><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>组件基础<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/vue/2.6.0/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>first-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>first-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'first-component'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token comment">//全局注册组件</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">"我的第一个组件"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h1>&#123;&#123;text&#125;&#125;&lt;/h1></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span> <span class="token comment">// 创建一个根实例</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/05/28/Vue%E5%85%A5%E9%97%A8/image-20220529145451729.png" alt="image-20220529145451729"></p><h4 id="局部注册组件"><a href="#局部注册组件" class="headerlink" title="局部注册组件"></a>局部注册组件</h4><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>组件基础<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/vue/2.6.0/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>first-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>first-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> component <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">"我的第一个组件"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h1>&#123;&#123;text&#125;&#125;&lt;/h1></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> <span class="token comment">// 创建一个根实例</span><span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">'first-component'</span><span class="token operator">:</span> component<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>需要注意的是，不论是全局注册组件还是局部注册组件，都应该创建一个Vue的根实例，同时在vue2，template之下只能有一个标签，否则会编译错误，可以使用一个div包裹在最外侧。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--错误的写法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--正确的写法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>在组件中，data不再是一个对象，而是一个函数，每个组件实例可以维护一份被返回对象的独立的拷贝，也就是每个组件都能独立维护自己的data，提高了组件复用性。</p><h3 id="组件复用"><a href="#组件复用" class="headerlink" title="组件复用"></a>组件复用</h3><p>你可以将组件进行任意次数的复用</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>first-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>first-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>first-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>first-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>first-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>first-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>正如上面所说，每个组件都会独立维护自己的data，这是因为每使用一次组件，就会重新创建一个新的实例。</p><h3 id="组件传参"><a href="#组件传参" class="headerlink" title="组件传参"></a>组件传参</h3><h4 id="父组件向子组件传参"><a href="#父组件向子组件传参" class="headerlink" title="父组件向子组件传参"></a>父组件向子组件传参</h4><p>prop是子组件用来接收父组件传递数据的一个自定义属性。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> component <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h1>&#123;&#123;text&#125;&#125;&lt;/h1></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> <span class="token comment">// 创建一个根实例</span><span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">'child'</span><span class="token operator">:</span> component<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这个例子中注册了一个名为child的组件，父组件#father使用child子组件的text属性进行传值，然后子组件通过使用props中的text显示数据，和data使用方法基本一致。</p><h4 id="props验证"><a href="#props验证" class="headerlink" title="props验证"></a>props验证</h4><p>为了让代码更加规范，我们通常需要给每个prop指定值的类型，此时我们可以以对象的形式列出prop，以键值对的形式指定prop名称和类型</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'prop'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">propA</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">//基础类型</span>        <span class="token literal-property property">propB</span><span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span>Number<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 多个类型</span>        <span class="token literal-property property">propC</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//必填</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>            <span class="token literal-property property">requires</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">propD</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">//默认值</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">10</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">propE</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">//带默认值的对象</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>            <span class="token keyword">default</span>： <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//对象或数组的默认值应该从工厂函数获取</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'hi'</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="子组件向父组件传参"><a href="#子组件向父组件传参" class="headerlink" title="子组件向父组件传参"></a>子组件向父组件传参</h4><p>除了父组件向子组件传参，常常还会有子组件向父组件传参，在vue中提供了自定义事件，即我们可以通过v-on绑定自定义的事件，子组件通过$emit触发事件以达到传参的目的。</p><p>先上示例</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>组件传参<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/vue/2.6.0/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;&#123;title&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">@eventname</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> component <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;button @click="transfer()">参数传递&lt;/button></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"eventname"</span><span class="token punctuation">,</span><span class="token string">"我是传递的参数"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#father'</span><span class="token punctuation">,</span> <span class="token comment">// 创建一个根实例</span><span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'现在没有参数传递'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> e<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">'child'</span><span class="token operator">:</span> component<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在这个例子中，首先注册了一个局部组件，并在组件中写了一个按钮，通过点击按钮触发子组件内部事件eventname，同时传递参数；然后再看父组件，使用@（v-on的简写）监听子组件内部事件eventname，事件触发的同时触发getValue方法，需要注意的是，这里我们只写方法名，也就是不加括号，然后接收到参数后赋值给title。</p><p><img src="/2022/05/28/Vue%E5%85%A5%E9%97%A8/image-20220529160133020.png" alt="image-20220529160133020"></p><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p>自定义的组件作为一个标签被我们所使用，有时候我们需要在标签中添加数据或插入其他内容，这时候便会用到插槽。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">></span></span>我是插入插槽的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> component <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>letf&lt;slot>&lt;/slot>right&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#father'</span><span class="token punctuation">,</span> <span class="token comment">// 创建一个根实例</span><span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">'child'</span><span class="token operator">:</span> component<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这是一个插槽的写法</p><p>然后就是多个插槽，只需要给每个插槽命名，然后通过v-slot标签指定插槽即可，如果不指定则为default。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>插槽<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/vue/2.6.0/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>top</span><span class="token punctuation">></span></span>我是插入top插槽的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>bottom</span><span class="token punctuation">></span></span>我是插入bottom插槽的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> component <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;main>&lt;div>letf&lt;slot name="top">&lt;/slot>right&lt;/div>&lt;div>letf&lt;slot name="bottom">&lt;/slot>right&lt;/div>&lt;/main></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#father'</span><span class="token punctuation">,</span> <span class="token comment">// 创建一个根实例</span><span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">'child'</span><span class="token operator">:</span> component<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>注意 <code>v-slot</code> 只能添加在 <code>&lt;template&gt;</code> 上</p><p>当被提供的内容<em>只有</em>默认插槽时，组件的标签才可以被当作插槽的模板来使用。这样我们就可以把 <code>v-slot</code> 直接用在组件上：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  &#123;&#123; slotProps.user.firstName &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span></code></pre><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>每个Vue实例都会经过数据监听、模板编译、挂载、dom更新、销毁等过程。下图为官网提供的生命周期图例，可以在不断学习和使用中慢慢理解。</p><p><img src="/2022/05/28/Vue%E5%85%A5%E9%97%A8/image-20220529163350237.png" alt="image-20220529163350237"></p><h2 id="VueCLI"><a href="#VueCLI" class="headerlink" title="VueCLI"></a>VueCLI</h2><h3 id="VueCLI简介"><a href="#VueCLI简介" class="headerlink" title="VueCLI简介"></a>VueCLI简介</h3><p>VueCLI是官方提供的一个脚手架，能够快速搭建起一个单页面应用（SPA）。</p><p>官网对于VueCLI的介绍</p><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，提供：</p><ul><li><p>通过 @vue&#x2F;cli 实现的交互式的项目脚手架。</p></li><li><p>通过 @vue&#x2F;cli + @vue&#x2F;cli-service-global 实现的零配置原型开发。</p></li><li><p>一个运行时依赖 (@vue&#x2F;cli-service)，该依赖：</p><ul><li><p>可升级；</p></li><li><p>基于 webpack 构建，并带有合理的默认配置；</p></li><li><p>可以通过项目内的配置文件进行配置；</p></li><li><p>可以通过插件进行扩展。</p></li></ul></li><li><p>一个丰富的官方插件集合，集成了前端生态中最好的工具。</p></li><li><p>一套完全图形化的创建和管理 Vue.js 项目的用户界面。</p><p>Vue CLI 致力于将 Vue 生态中的工具基础标准化。它确保了各种构建工具能够基于智能的默认配置即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去纠结配置的问题。与此同时，它也为每个工具提供了调整配置的灵活性，无需 eject。</p></li></ul><h3 id="使用VueCLI搭建Vue-js项目"><a href="#使用VueCLI搭建Vue-js项目" class="headerlink" title="使用VueCLI搭建Vue.js项目"></a>使用VueCLI搭建Vue.js项目</h3><p>由于安装脚手架需要使用到npm，在搭建项目之前需要确保安装node.js，这里就不做阐述了。</p><p>确保环境问题后，在控制台全局安装</p><pre class="language-none"><code class="language-none">npm install -g vue-cli &#x2F;&#x2F;此方法安装的是2.x版本npm install -g @vue&#x2F;cli 此方法安装的是最新版</code></pre><p>首先创建一个文件夹，然后从控制台进入该文件夹</p><p>例如我在d盘新建了一个<code>firstvue</code></p><p><img src="/2022/05/28/Vue%E5%85%A5%E9%97%A8/image-20220529165949168.png" alt="image-20220529165949168"></p><p>执行命令<code>vue init webpack myfirstproject</code></p><p>其中myfirstproject是项目名称，可以根据自己的喜好，webpeck表示以webpack为模板生成项目。</p><p>接下来会让我们确认自己的项目名称，项目描述，作者，是否使用<code>vue-router</code>，<code>ESLint</code>等，可根据自己的需求进行修改，需要注意的是vue-router是构建单页面应用的关键，所以还是得选上，我这里直接一路回车了，然后就等待下载完成。</p><p><img src="/2022/05/28/Vue%E5%85%A5%E9%97%A8/image-20220529170841507.png" alt="image-20220529170841507"></p><p>此时项目已经下载完成了，cd进入项目目录，运行<code>npm run dev</code>，如果报错可能是未能加载项目所需的依赖，也就是node_modules里面的内容，这时候运行<code>npm install</code>下载依赖，完成后重新运行即可。</p><p><img src="/2022/05/28/Vue%E5%85%A5%E9%97%A8/image-20220529171013643.png" alt="image-20220529171013643"></p><p>浏览器地址栏输入该地址，看到如下界面，一个使用脚手架搭建的Vue.js项目就搭建完成了</p><p><img src="/2022/05/28/Vue%E5%85%A5%E9%97%A8/image-20220529171144928.png" alt="image-20220529171144928"></p><p>打开项目目录的src文件夹，可以看到有一个<code>APP.vue</code>文件，这是一个单文件组件下面会提到。</p><p>先看一下项目结构</p><pre class="language-bash" data-language="bash"><code class="language-bash">├── build --------------------------------- 项目构建的相关配置文件，配置参数├── config ---------------------------------- 配置目录，包括IP、端口等。├── node_modules ---------------------------- <span class="token function">npm</span> 加载的项目依赖模块├── src ------------------------------------- 开发的根目录。│   ├── assets ------------------------------ 静态文件夹，放置一些图片、logo，css、js文件等│   ├── components -------------------------- 组件目录，存放组件文件。│   ├── main.js ----------------------------- 项目js文件，vue实例就是在这里面创建的。│   ├── App.vue ----------------------------- 项目入口组件，所有的页面都在这个组件进行渲染。│   ├── router ------------------------------ 路由├── static ---------------------------- 静态资源目录，如图片、字体等。├── index.html ------------------------------ 首页入口文件，用于vue实例的挂载。├── package.json ---------------------------- 项目依赖文件。 ├──  .README.md------------------------------- 项目的说明文档，markdown 格式</code></pre><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><p>在Vue项目中，除了使用component来定义组件，还可以使用单文件组件，使用单文件组件能使得组件开发更加方便快捷。</p><p>原本定义组件的方式有以下缺点</p><ul><li><strong>全局定义 (Global definitions)</strong> 强制要求每个 component 中的命名不得重复</li><li><strong>字符串模板 (String templates)</strong> 缺乏语法高亮，在 HTML 有多行的时候，需要用到丑陋的 <code>\</code></li><li><strong>不支持 CSS (No CSS support)</strong> 意味着当 HTML 和 JavaScript 组件化时，CSS 明显被遗漏</li><li><strong>没有构建步骤 (No build step)</strong> 限制只能使用 HTML 和 ES5 JavaScript，而不能使用预处理器，如 Pug (formerly Jade) 和 Babel</li></ul><p>使用拓展名为<code>*.vue</code>的单文件组件为以上问题提供了解决方案。</p><p>一个<code>*.vue</code>模板可分为<code>template</code>,<code>script</code>,<code>style</code>三个部分，可以理解为html、js、css</p><p>例如，这是一个名为<code>index.vue</code>的组件实例</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;h1&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;index&quot;,  data()&#123;      return &#123;          title: &#39;hello world!&#39;      &#125;  &#125;&#125;&lt;&#x2F;script&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫笔记</title>
      <link href="/2022/05/21/spider-notebook/"/>
      <url>/2022/05/21/spider-notebook/</url>
      
        <content type="html"><![CDATA[<p>实验中所用到的网页均来自开课吧</p><h3 id="了解爬虫基本原理"><a href="#了解爬虫基本原理" class="headerlink" title="了解爬虫基本原理"></a>了解爬虫基本原理</h3><p>所谓爬虫，就是一种用于爬取网络资源或数据的程序，它通过一定的规则，模拟浏览器向服务器发送请求的过程，并接收响应数据，从而达到获取资源的目的。原理上，浏览器（或客户端）等完成的事，爬虫也能完成。</p><p>在学习爬虫之前，我们应该先认识一下http报文，了解什么是请求头，请求体，响应头和响应体。</p><p>我们得知道，爬虫能爬取的应该是我们能看到，且已知存在的资源。所以首先我们得知道自己要爬取的资源地址，通过向该地址发起网络请求，获得响应体，从而达到获取数据的目的。</p><h5 id="爬虫的四个基本步骤"><a href="#爬虫的四个基本步骤" class="headerlink" title="爬虫的四个基本步骤"></a>爬虫的四个基本步骤</h5><p>获取数据 —&gt; 解析数据 —&gt; 筛选数据 —&gt; 储存数据</p><p><img src="/2022/05/21/spider-notebook/image-20220528115748952.png" alt="image-20220528115748952"></p><p>下载相关模块：</p><ul><li><p>requests（用于获取数据）</p></li><li><p>BeautifulSoup（解析和提取数据）</p></li></ul><pre class="language-python" data-language="python"><code class="language-python">pip instal requestspip install bs4</code></pre><h3 id="我的第一只爬虫"><a href="#我的第一只爬虫" class="headerlink" title="我的第一只爬虫"></a>我的第一只爬虫</h3><h4 id="使用requests进行网页数据爬取"><a href="#使用requests进行网页数据爬取" class="headerlink" title="使用requests进行网页数据爬取"></a>使用requests进行网页数据爬取</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">## 导入模块</span><span class="token keyword">import</span> requests res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.zhaojiuyi.top/"</span><span class="token punctuation">)</span><span class="token comment"># print(res) #因为这里爬取的是我的博客网站，所以会打印很多html标签</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 使用requests.get方法得到了一个Response（响应）对象</span><span class="token comment">## &lt;class 'requests.models.Response'></span></code></pre><h4 id="response常用的四种属性："><a href="#response常用的四种属性：" class="headerlink" title="response常用的四种属性："></a>response常用的四种属性：</h4><ul><li><p>1，reponse.status    code 响应状态码，检查请求是否成功</p></li><li><p>2，reponse.content    reponse对象的二进制数据</p></li><li><p>3，reponse.text   reponse对象的字符串数据</p></li><li><p>4，reponse.encoding    reponse对象的编码（requests会自己去判断返回数据的编码类型。当判断出错导致乱码的时候，我们就需要自己去指定编码类型，也就是 response.encoding，我们指定的编码类型必须和原数据的编码类型一致）</p></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'响应状态码为：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>res<span class="token punctuation">.</span>status_code<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>  <span class="token comment"># 如果响应状态码返回200说明请求成功</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token comment"># 直接以字符串的形式打印response对象内容</span></code></pre><p>除了爬取html网页，我们还可以爬取图片，视频等。</p><h3 id="Robots-协议"><a href="#Robots-协议" class="headerlink" title="Robots 协议"></a>Robots 协议</h3><p>对于服务器来说，它是不允许恶意爬虫和高频次请求的爬虫，因为这可能会导致服务器崩溃。不过在一般情况下，服务器都是允许搜索引擎的爬虫在规则允许的情况下对网站进行爬取，收录。</p><p>这些规则，就写在每个网站的 Robots 协议中。 查看 Robots 协议的话，只需要在域名后加入 &#x2F;robots.txt 就可以查看了。</p><p>让我们看看爱奇艺的Robots协议<a href="https://www.iqiyi.com/robots.txt">https://www.iqiyi.com/robots.txt</a></p><p><img src="/2022/05/21/spider-notebook/image-20220522121032208.png" alt="image-20220522121032208"></p><p>Allow和Disallow，Allow代表可以被访问，Disallow代表禁止被访问。</p><h3 id="BeautifulSoup数据解析"><a href="#BeautifulSoup数据解析" class="headerlink" title="BeautifulSoup数据解析"></a>BeautifulSoup数据解析</h3><p>beautifulsoup只能只能只能对 —— 字符串类型 —— 的值或者变量进行解析</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupres <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://xiaoke.kaikeba.com/example/canteen/index.html'</span><span class="token punctuation">)</span>html <span class="token operator">=</span> res<span class="token punctuation">.</span>text<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 打印res.text对象的类型，发现为str</span><span class="token comment">## beautifulsoup只能只能只能对  字符串类型  的值或者变量进行解析</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'html.parser'</span><span class="token punctuation">)</span> <span class="token comment">##对res.text进行解析，解析方式为 html.parser</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>soup<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#查看soup类型，发现解析后的对象为BeautifulSoup对象</span><span class="token comment"># print(soup)</span><span class="token comment">## &lt;class 'str'></span><span class="token comment">## &lt;class 'bs4.BeautifulSoup'></span></code></pre><h4 id="使用BeautifulSoup提取数据"><a href="#使用BeautifulSoup提取数据" class="headerlink" title="使用BeautifulSoup提取数据"></a>使用BeautifulSoup提取数据</h4><p>find()与find_all()，以及Tag对象。</p><p>find()与find_all()是BeautifulSoup对象的两个方法，它们可以匹配HTML的标签和属性，把BeautifulSoup对象里符合要求的数据都提取出来。<br>find()只提取首个满足要求的数据，而find_all()提取出的是所有满足要求的数据。</p><p>find(标签，属性) example: find(div)   find(div,class_&#x3D;’show_list_item’)</p><pre class="language-python" data-language="python"><code class="language-python">url <span class="token operator">=</span> <span class="token string">'https://localprod.pandateacher.com/python-manuscript/crawler-html/spder-men0.0.html'</span>res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get <span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'状态码：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>res<span class="token punctuation">.</span>status_code<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">,</span><span class="token string">'html.parser'</span><span class="token punctuation">)</span>item1 <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span> <span class="token comment">#使用find()方法提取首个&lt;div>元素，并放到变量item1里。</span>item2 <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'打印使用find()方法得到的类型：</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">type</span><span class="token punctuation">(</span>item1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span> <span class="token comment">#打印item1的数据类型 ,发现是tag类的对象</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'打印使用find_all()方法得到的类型：</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">type</span><span class="token punctuation">(</span>item2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span> <span class="token comment">#打印item2的数据类型 ,发现是ResultSet类的对象，相当于将tag对象以列表的方式存起来</span><span class="token keyword">print</span><span class="token punctuation">(</span>item1<span class="token punctuation">)</span> <span class="token comment">#打印item1</span><span class="token keyword">print</span><span class="token punctuation">(</span>item2<span class="token punctuation">)</span> <span class="token comment">#打印item2</span><span class="token comment">#状态码：200</span><span class="token comment">#打印使用find()方法得到的类型：&lt;class 'bs4.element.Tag'></span><span class="token comment">#打印使用find_all()方法得到的类型：&lt;class 'bs4.element.ResultSet'></span><span class="token comment">#&lt;div>大家好，我是一个块&lt;/div></span><span class="token comment">#[&lt;div>大家好，我是一个块&lt;/div>, &lt;div>我也是一个块&lt;/div>, &lt;div>我还是一个块&lt;/div>]</span></code></pre><p>要考虑的就是，要用什么参数去查找和定位，标签，还是属性。此时，可以用到开发者工具的搜索功能</p><p>点击右键-显示网页源代码，在这个页面里去搜索会更加准确</p><pre class="language-python" data-language="python"><code class="language-python">res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://xiaoke.kaikeba.com/example/canteen/index.html'</span><span class="token punctuation">)</span>html <span class="token operator">=</span> res<span class="token punctuation">.</span>textsoup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'html.parser'</span><span class="token punctuation">)</span> items <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'show-list-item'</span><span class="token punctuation">)</span> <span class="token comment"># 通过匹配标签和属性提取我们想要的数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span> <span class="token comment"># 打印items</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#打印items的数据类型</span></code></pre><pre class="language-python" data-language="python"><code class="language-python">res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://xiaoke.kaikeba.com/example/canteen/index.html'</span><span class="token punctuation">)</span>html <span class="token operator">=</span> res<span class="token punctuation">.</span>textsoup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'html.parser'</span><span class="token punctuation">)</span> items <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'show-list-item'</span><span class="token punctuation">)</span> <span class="token comment"># print(items)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># &lt;class 'bs4.element.ResultSet'></span><span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'item对象类型：</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">type</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment">#     print(item) # 打印item</span><span class="token comment"># item对象类型：&lt;class 'bs4.element.Tag'></span><span class="token comment"># item对象类型：&lt;class 'bs4.element.Tag'></span><span class="token comment"># item对象类型：&lt;class 'bs4.element.Tag'></span></code></pre><h4 id="Tag对象的三种常用属性与方法"><a href="#Tag对象的三种常用属性与方法" class="headerlink" title="Tag对象的三种常用属性与方法"></a>Tag对象的三种常用属性与方法</h4><ul><li>Tag.find() 与 Tag.find_all()———-Tag对象可以使用find()与find_all()来继续检索，提取Tag中的Tag</li><li>Tag.text——————————提取Tag中的文字</li><li>Tag[‘属性名’]————————–输入参数：属性名，可以提取Tag中这个属性的值</li></ul><pre class="language-python" data-language="python"><code class="language-python">res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://xiaoke.kaikeba.com/example/canteen/index.html'</span><span class="token punctuation">)</span>html <span class="token operator">=</span> res<span class="token punctuation">.</span>textsoup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'html.parser'</span><span class="token punctuation">)</span> items <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'show-list-item'</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>    title <span class="token operator">=</span> item<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'desc-title'</span><span class="token punctuation">)</span> <span class="token comment"># 在列表中的每个元素里，匹配属性class_='title'提取出数据</span>    material <span class="token operator">=</span> item<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'desc-material'</span><span class="token punctuation">)</span> <span class="token comment">#在列表中的每个元素里，匹配属性class_='desc-material'提取出数据</span>    step <span class="token operator">=</span> item<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'desc-step'</span><span class="token punctuation">)</span> <span class="token comment">#在列表中的每个元素里，匹配属性class_='desc-step'提取出数据</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>material<span class="token punctuation">,</span>step<span class="token punctuation">)</span> <span class="token comment"># 打印提取出的数据</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>material<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 打印提取出的数据类型</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>    title <span class="token operator">=</span> item<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'desc-title'</span><span class="token punctuation">)</span> <span class="token comment"># 在列表中的每个元素里，匹配属性class_='title'提取出数据</span>    material <span class="token operator">=</span> item<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'desc-material'</span><span class="token punctuation">)</span> <span class="token comment">#在列表中的每个元素里，匹配属性class_='desc-material'提取出数据</span>    step <span class="token operator">=</span> item<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'desc-step'</span><span class="token punctuation">)</span> <span class="token comment">#在列表中的每个元素里，匹配属性class_='desc-step'提取出数据</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>text<span class="token punctuation">,</span><span class="token string">'\n'</span><span class="token punctuation">,</span>material<span class="token punctuation">.</span>text<span class="token punctuation">,</span><span class="token string">'\n'</span><span class="token punctuation">,</span>step<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><h3 id="借助更多的工具-Network，XHR，json"><a href="#借助更多的工具-Network，XHR，json" class="headerlink" title="借助更多的工具 Network，XHR，json"></a>借助更多的工具 Network，XHR，json</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token comment"># 引用requests库</span>res_music <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://c.y.qq.com/soso/fcgi-bin/client_search_cp?ct=24&amp;qqmusic_ver=1298&amp;new_json=1&amp;remoteplace=txt.yqq.song&amp;searchid=65805191174562925&amp;t=0&amp;aggr=1&amp;cr=1&amp;catZhida=1&amp;lossless=0&amp;flag_qc=0&amp;p=1&amp;n=10&amp;w=%E4%BA%94%E6%9C%88%E5%A4%A9&amp;g_tk=5381&amp;loginUin=0&amp;hostUin=0&amp;format=json&amp;inCharset=utf8&amp;outCharset=utf-8&amp;notice=0&amp;platform=yqq.json&amp;needNewCode=0'</span><span class="token punctuation">)</span><span class="token comment"># 调用get方法，下载这个字典</span>json_music <span class="token operator">=</span> res_music<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 使用json()方法，将response对象，转为列表/字典</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>json_music<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 打印json_music的数据类型 &lt;class 'dict'></span>musics <span class="token operator">=</span> json_music<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'song'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span><span class="token keyword">for</span> music <span class="token keyword">in</span> musics<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>music<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsres_music <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://c.y.qq.com/soso/fcgi-bin/client_search_cp?ct=24&amp;qqmusic_ver=1298&amp;new_json=1&amp;remoteplace=txt.yqq.song&amp;searchid=65805191174562925&amp;t=0&amp;aggr=1&amp;cr=1&amp;catZhida=1&amp;lossless=0&amp;flag_qc=0&amp;p=1&amp;n=10&amp;w=%E4%BA%94%E6%9C%88%E5%A4%A9&amp;g_tk=5381&amp;loginUin=0&amp;hostUin=0&amp;format=json&amp;inCharset=utf8&amp;outCharset=utf-8&amp;notice=0&amp;platform=yqq.json&amp;needNewCode=0'</span><span class="token punctuation">)</span>json_music <span class="token operator">=</span> res_music<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>list_music <span class="token operator">=</span> json_music<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'song'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span><span class="token comment"># 一层一层地取字典，获取歌单列表</span><span class="token keyword">for</span> music <span class="token keyword">in</span> list_music<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'歌名：'</span><span class="token operator">+</span>music<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所属专辑：'</span><span class="token operator">+</span>music<span class="token punctuation">[</span><span class="token string">'album'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'播放时长：'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>music<span class="token punctuation">[</span><span class="token string">'interval'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'秒'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'播放链接：https://y.qq.com/n/yqq/song/'</span><span class="token operator">+</span>music<span class="token punctuation">[</span><span class="token string">'mid'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'.html\n\n'</span><span class="token punctuation">)</span></code></pre><h4 id="自定义请求头"><a href="#自定义请求头" class="headerlink" title="自定义请求头"></a>自定义请求头</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsheaders<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'user-agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.79 Safari/537.36'</span><span class="token punctuation">&#125;</span><span class="token comment">##自定义请求头</span>url <span class="token operator">=</span> <span class="token string">'https://c.y.qq.com/soso/fcgi-bin/client_search_cp'</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    param <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">#利用param实现参数变化</span>        <span class="token string">'ct'</span><span class="token punctuation">:</span> <span class="token string">'24'</span><span class="token punctuation">,</span>        <span class="token string">'qqmusic_ver'</span><span class="token punctuation">:</span> <span class="token string">'1298'</span><span class="token punctuation">,</span>        <span class="token string">'new_json'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>        <span class="token string">'remoteplace'</span><span class="token punctuation">:</span> <span class="token string">'sizer.yqq.song_next'</span><span class="token punctuation">,</span>        <span class="token string">'t'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>        <span class="token string">'aggr'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>        <span class="token string">'cr'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>        <span class="token string">'catZhida'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>        <span class="token string">'lossless'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>        <span class="token string">'flag_qc'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>        <span class="token string">'p'</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span>  <span class="token comment">#设置页数</span>        <span class="token string">'n'</span><span class="token punctuation">:</span> <span class="token string">'20'</span><span class="token punctuation">,</span> <span class="token comment">##设置每一页的歌曲数量</span>        <span class="token string">'w'</span><span class="token punctuation">:</span> <span class="token string">'五月天'</span><span class="token punctuation">,</span>        <span class="token string">'g_tk'</span><span class="token punctuation">:</span> <span class="token string">'5381'</span><span class="token punctuation">,</span>        <span class="token string">'loginUin'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>        <span class="token string">'hostUin'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>        <span class="token string">'format'</span><span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>        <span class="token string">'inCharset'</span><span class="token punctuation">:</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span>        <span class="token string">'outCharset'</span><span class="token punctuation">:</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span>        <span class="token string">'notice'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>        <span class="token string">'platform'</span><span class="token punctuation">:</span> <span class="token string">'yqq.json'</span><span class="token punctuation">,</span>        <span class="token string">'needNewCode'</span><span class="token punctuation">:</span> <span class="token string">'0'</span>    <span class="token punctuation">&#125;</span>    res_songs<span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>param<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    json_songs <span class="token operator">=</span> res_songs<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    list_songs <span class="token operator">=</span> json_songs<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'song'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> song <span class="token keyword">in</span> list_songs<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>song<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#输出的时候标记歌曲所在的页码</span></code></pre><pre class="language-python" data-language="python"><code class="language-python">headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'origin'</span><span class="token punctuation">:</span><span class="token string">'https://y.qq.com'</span><span class="token punctuation">,</span>    <span class="token comment"># 请求来源</span>    <span class="token string">'referer'</span><span class="token punctuation">:</span><span class="token string">'https://y.qq.com/n/yqq/song/004Z8Ihr0JIu5s.html'</span><span class="token punctuation">,</span>    <span class="token comment"># 请求来源</span>    <span class="token string">'user-agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36'</span><span class="token punctuation">,</span>    <span class="token comment"># 标记了请求从什么设备，什么浏览器上发出</span>    <span class="token punctuation">&#125;</span><span class="token comment"># 伪装请求头</span>res_songs<span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">## 根据歌手名字进行查找歌曲</span><span class="token keyword">import</span> requests<span class="token comment">#调用requests模块</span>choice <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入歌手名字'</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'https://c.y.qq.com/soso/fcgi-bin/client_search_cp'</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'ct'</span><span class="token punctuation">:</span><span class="token string">'24'</span><span class="token punctuation">,</span><span class="token string">'qqmusic_ver'</span><span class="token punctuation">:</span> <span class="token string">'1298'</span><span class="token punctuation">,</span><span class="token string">'new_json'</span><span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'remoteplace'</span><span class="token punctuation">:</span><span class="token string">'txt.yqq.song'</span><span class="token punctuation">,</span><span class="token string">'searchid'</span><span class="token punctuation">:</span><span class="token string">'70717568573156220'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">:</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'aggr'</span><span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'cr'</span><span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'catZhida'</span><span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'lossless'</span><span class="token punctuation">:</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'flag_qc'</span><span class="token punctuation">:</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'p'</span><span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'n'</span><span class="token punctuation">:</span><span class="token string">'20'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">:</span>choice<span class="token punctuation">,</span><span class="token string">'g_tk'</span><span class="token punctuation">:</span><span class="token string">'714057807'</span><span class="token punctuation">,</span><span class="token string">'loginUin'</span><span class="token punctuation">:</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'hostUin'</span><span class="token punctuation">:</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'format'</span><span class="token punctuation">:</span><span class="token string">'json'</span><span class="token punctuation">,</span><span class="token string">'inCharset'</span><span class="token punctuation">:</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token string">'outCharset'</span><span class="token punctuation">:</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span><span class="token string">'notice'</span><span class="token punctuation">:</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'platform'</span><span class="token punctuation">:</span><span class="token string">'yqq.json'</span><span class="token punctuation">,</span><span class="token string">'needNewCode'</span><span class="token punctuation">:</span><span class="token string">'0'</span> <span class="token punctuation">&#125;</span><span class="token comment"># 将参数封装为字典</span>res_music <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token operator">=</span>params<span class="token punctuation">)</span><span class="token comment"># 调用get方法，下载这个列表</span>json_music <span class="token operator">=</span> res_music<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 使用json()方法，将response对象，转为列表/字典</span>list_music <span class="token operator">=</span> json_music<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'song'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span><span class="token comment"># 一层一层地取字典，获取歌单列表</span><span class="token keyword">for</span> music <span class="token keyword">in</span> list_music<span class="token punctuation">:</span><span class="token comment"># list_music是一个列表，music是它里面的元素</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>music<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 以name为键，查找歌曲名</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所属专辑：'</span><span class="token operator">+</span>music<span class="token punctuation">[</span><span class="token string">'album'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 查找专辑名</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'播放时长：'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>music<span class="token punctuation">[</span><span class="token string">'interval'</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'分钟'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>music<span class="token punctuation">[</span><span class="token string">'interval'</span><span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'秒'</span><span class="token punctuation">)</span><span class="token comment"># 查找播放时长</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'播放链接：https://y.qq.com/n/yqq/song/'</span><span class="token operator">+</span>music<span class="token punctuation">[</span><span class="token string">'mid'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'.html\n\n'</span><span class="token punctuation">)</span><span class="token comment"># 查找播放链接</span></code></pre><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p>csv:import csv ; Excel:pip install openpyxl</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> openpyxl<span class="token comment"># 存</span><span class="token comment"># 引用openpyxl</span>wb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 利用openpyxl.Workbook()函数创建新的workbook（工作薄）对象，就是创建新的空的Excel文件。</span>sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span>active<span class="token comment"># wb.active就是获取这个工作薄的活动表，通常就是第一个工作簿，也就是我们在上面的图片中看到的sheet1。</span>sheet<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'示例'</span><span class="token comment"># 可以用.title给工作表重命名。现在第一个工作表的名称就会由原来默认的“sheet1”改为"kaikeba"。</span>sheet<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token comment"># 向单个单元格写入数据</span>score1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'math'</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">]</span>sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>score1<span class="token punctuation">)</span><span class="token comment"># 写入整行的数据，变量类型是一个列表</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'score.xlsx'</span><span class="token punctuation">)</span><span class="token comment"># 保存修改的Excel</span>wb<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 关闭Excel</span><span class="token comment"># 取</span>wb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'score.xlsx'</span><span class="token punctuation">)</span><span class="token comment"># 打开的指定的工作簿</span>sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'示例'</span><span class="token punctuation">]</span><span class="token comment"># 指定读取的工作表的名称</span>A1_value <span class="token operator">=</span> sheet<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token keyword">print</span><span class="token punctuation">(</span>A1_value<span class="token punctuation">)</span><span class="token comment"># 获取</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> openpyxlurl <span class="token operator">=</span> <span class="token string">'https://c.y.qq.com/soso/fcgi-bin/client_search_cp'</span>wb<span class="token operator">=</span>openpyxl<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#创建工作薄</span>sheet<span class="token operator">=</span>wb<span class="token punctuation">.</span>active<span class="token comment">#获取工作薄的活动表</span>sheet<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">'songs_mayday'</span><span class="token comment">#工作表重命名</span>column_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'歌曲名'</span><span class="token punctuation">,</span><span class="token string">'所属专辑'</span><span class="token punctuation">,</span><span class="token string">'播放时长'</span><span class="token punctuation">,</span><span class="token string">'播放链接'</span><span class="token punctuation">]</span>sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'ct'</span><span class="token punctuation">:</span> <span class="token string">'24'</span><span class="token punctuation">,</span>        <span class="token string">'qqmusic_ver'</span><span class="token punctuation">:</span> <span class="token string">'1298'</span><span class="token punctuation">,</span>        <span class="token string">'new_json'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>        <span class="token string">'remoteplace'</span><span class="token punctuation">:</span> <span class="token string">'sizer.yqq.song_next'</span><span class="token punctuation">,</span>        <span class="token string">'searchid'</span><span class="token punctuation">:</span> <span class="token string">'64405487069162918'</span><span class="token punctuation">,</span>        <span class="token string">'t'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>        <span class="token string">'aggr'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>        <span class="token string">'cr'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>        <span class="token string">'catZhida'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>        <span class="token string">'lossless'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>        <span class="token string">'flag_qc'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>        <span class="token string">'p'</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'n'</span><span class="token punctuation">:</span> <span class="token string">'20'</span><span class="token punctuation">,</span>        <span class="token string">'w'</span><span class="token punctuation">:</span> <span class="token string">'五月天'</span><span class="token punctuation">,</span>        <span class="token string">'g_tk'</span><span class="token punctuation">:</span> <span class="token string">'5381'</span><span class="token punctuation">,</span>        <span class="token string">'loginUin'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>        <span class="token string">'hostUin'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>        <span class="token string">'format'</span><span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>        <span class="token string">'inCharset'</span><span class="token punctuation">:</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span>        <span class="token string">'outCharset'</span><span class="token punctuation">:</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span>        <span class="token string">'notice'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>        <span class="token string">'platform'</span><span class="token punctuation">:</span> <span class="token string">'yqq.json'</span><span class="token punctuation">,</span>        <span class="token string">'needNewCode'</span><span class="token punctuation">:</span> <span class="token string">'0'</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># 将参数封装为字典</span>    res_music <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">)</span>    <span class="token comment"># 调用get方法，下载这个列表</span>    json_music <span class="token operator">=</span> res_music<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 使用json()方法，将response对象，转为列表/字典</span>    list_music <span class="token operator">=</span> json_music<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'song'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span>    <span class="token comment"># 一层一层地取字典，获取歌单列表</span>    <span class="token keyword">for</span> music <span class="token keyword">in</span> list_music<span class="token punctuation">:</span>        name <span class="token operator">=</span> music<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>        <span class="token comment"># 以name为键，查找歌曲名，把歌曲名赋值给name</span>        album <span class="token operator">=</span> music<span class="token punctuation">[</span><span class="token string">'album'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>        <span class="token comment"># 查找专辑名，把专辑名赋给album</span>        time <span class="token operator">=</span> music<span class="token punctuation">[</span><span class="token string">'interval'</span><span class="token punctuation">]</span>        <span class="token comment"># 查找播放时长，把时长赋值给time</span>        link <span class="token operator">=</span> <span class="token string">'https://y.qq.com/n/yqq/song/'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>music<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'media_mid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.html\n\n'</span>        <span class="token comment"># 查找播放链接，把链接赋值给link</span>        sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span> album<span class="token punctuation">,</span> time<span class="token punctuation">,</span> link<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 把name、album、time和link写成列表，用append函数多行写入Excel</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'mayday.xlsx'</span><span class="token punctuation">)</span>wb<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#最后保存并关闭这个Excel文件</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdsongs <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'mayday.xlsx'</span><span class="token punctuation">)</span>songs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment">#切片打印歌单</span></code></pre><h3 id="分页爬取"><a href="#分页爬取" class="headerlink" title="分页爬取"></a>分页爬取</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> csv<span class="token comment"># 准备头文件</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36'</span><span class="token punctuation">&#125;</span><span class="token comment"># 新建csv文件并打开文件</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'articles.csv'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token comment"># 写入表头</span>writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'标题'</span><span class="token punctuation">,</span> <span class="token string">'链接'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 设置爬取链接</span>url <span class="token operator">=</span> <span class="token string">'https://i.news.qq.com/trpc.qqnews_web.kv_srv.kv_srv_http_proxy/list'</span><span class="token comment"># 设置 offset 的起始值为 0</span>offset <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 循环三页</span><span class="token keyword">while</span> offset <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">:</span>    <span class="token comment"># 封装参数</span>    params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'sub_srv_id'</span><span class="token punctuation">:</span> <span class="token string">'antip'</span><span class="token punctuation">,</span> <span class="token string">'srv_id'</span><span class="token punctuation">:</span> <span class="token string">'pc'</span><span class="token punctuation">,</span> <span class="token string">'offset'</span><span class="token punctuation">:</span> offset<span class="token punctuation">,</span> <span class="token string">'limit'</span><span class="token punctuation">:</span> <span class="token string">'20'</span><span class="token punctuation">,</span> <span class="token string">'strategy'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>              <span class="token string">'ext'</span><span class="token punctuation">:</span> <span class="token string">'&#123;"pool":["high","top"],"is_filter":10,"check_type":true&#125;'</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 发送请求，并把响应内容赋值给变量 res</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token comment"># 使用 json 方法将响应结果读成字典</span>    articles <span class="token operator">=</span> res<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 取出 data 对应的值</span>    data <span class="token operator">=</span> articles<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span>    <span class="token comment"># print(data)</span>    <span class="token comment"># 遍历 data 内容</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>        <span class="token comment"># 判断这行内容是不是文章</span>        <span class="token keyword">if</span> i<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># print(i)</span>            <span class="token comment"># 取出这行内容，放到列表里</span>            row <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token comment"># 写入这行内容</span>            writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>row<span class="token punctuation">)</span>    <span class="token comment"># 换页</span>    offset <span class="token operator">=</span> offset <span class="token operator">+</span> <span class="token number">20</span><span class="token comment"># 关闭文件</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="爬取娱乐新闻"><a href="#爬取娱乐新闻" class="headerlink" title="爬取娱乐新闻"></a>爬取娱乐新闻</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">## 爬取娱乐新闻</span>url <span class="token operator">=</span> <span class="token string">'https://i.news.qq.com/trpc.qqnews_web.kv_srv.kv_srv_http_proxy/list?sub_srv_id=ent&amp;srv_id=pc&amp;offset=0&amp;limit=20&amp;strategy=1&amp;ext=&#123;%22pool%22:[%22top%22],%22is_filter%22:10,%22check_type%22:true&#125;'</span>res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>bes <span class="token operator">=</span> res<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>bes<span class="token punctuation">)</span><span class="token punctuation">)</span>data <span class="token operator">=</span> bes<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>    name <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>    url_html <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">': '</span><span class="token operator">+</span>url_html<span class="token punctuation">)</span></code></pre><h3 id="爬虫进阶-cookie"><a href="#爬虫进阶-cookie" class="headerlink" title="爬虫进阶 cookie"></a>爬虫进阶 cookie</h3><p>利用cookie登录kaikeba 实验网址：<a href="https://xiaoke.kaikeba.com/example/wordpress/wp-login.php">https://xiaoke.kaikeba.com/example/wordpress/wp-login.php</a> 用户名：kaikeba 密码：kaikeba888 ，提交评论</p><pre class="language-python" data-language="python"><code class="language-python">url <span class="token operator">=</span> <span class="token string">'https://xiaoke.kaikeba.com/example/wordpress/wp-login.php'</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36'</span><span class="token punctuation">&#125;</span><span class="token comment">## 自定义请求头，防止反爬虫</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'log'</span><span class="token punctuation">:</span> <span class="token string">'kaikeba'</span><span class="token punctuation">,</span>    <span class="token string">'pwd'</span><span class="token punctuation">:</span> <span class="token string">'kaikeba888'</span><span class="token punctuation">,</span>    <span class="token string">'rememberme'</span><span class="token punctuation">:</span> <span class="token string">'forever'</span><span class="token punctuation">,</span>    <span class="token string">'wp-submit'</span><span class="token punctuation">:</span> <span class="token string">'登录'</span><span class="token punctuation">,</span>    <span class="token string">'redirect_to'</span><span class="token punctuation">:</span> <span class="token string">'https://xiaoke.kaikeba.com/example/wordpress/2019/10/17/%e5%bc%80%e8%af%be%e5%90%a7%e6%97%a0%e6%95%8c%e5%a5%bd%e5%90%83%e7%9a%84%e9%a3%9f%e5%a0%82%e4%b8%80%e5%91%a8%e8%8f%9c%e8%b0%b1/'</span><span class="token punctuation">,</span>    <span class="token string">'testcookie'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">&#125;</span><span class="token comment">## 自定义登录的参数（form data,参数的值自定义），封装成字典</span>res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 打印状态码</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登录成功!!!!"</span><span class="token punctuation">)</span>    cookie <span class="token operator">=</span> res<span class="token punctuation">.</span>cookies    <span class="token keyword">print</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span>  <span class="token comment"># 打印cookie</span>url1 <span class="token operator">=</span> <span class="token string">'https://xiaoke.kaikeba.com/example/wordpress/wp-comments-post.php'</span>data1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'comment'</span><span class="token punctuation">:</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入评论："</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'submit'</span><span class="token punctuation">:</span> <span class="token string">'发表评论'</span><span class="token punctuation">,</span>    <span class="token string">'comment_post_ID'</span><span class="token punctuation">:</span> <span class="token string">'35'</span><span class="token punctuation">,</span>    <span class="token string">'comment_parent'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">&#125;</span>res1 <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url1<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>data1<span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookie<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res1<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre><h3 id="session-会话"><a href="#session-会话" class="headerlink" title="session(会话)"></a>session(会话)</h3><p>所谓的会话，可以理解成我们用浏览器上网，到关闭浏览器的这一过程。session是会话过程中，服务器用来记录特定用户会话的信息。</p><ul><li>session和cookie的关系还非常密切——cookie中存储着session的编码信息，session中又存储了cookie的信息。</li><li>当浏览器第一次访问购物网页时，服务器会返回set cookie的字段给浏览器，而浏览器会把cookie保存到本地。</li><li>等浏览器第二次访问这个购物网页时，就会带着cookie去请求，而因为cookie里带有会话的编码信息，服务器立马就能辨认出这个用户，同时返回和这个用户相关的特定编码的session。</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestssession <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#用requests.session()创建session对象，相当于创建了一个特定的会话，帮我们自动保持了cookie。</span>url_login <span class="token operator">=</span> <span class="token string">'https://xiaoke.kaikeba.com/example/wordpress/wp-login.php'</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36'</span><span class="token punctuation">&#125;</span>data_login <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'log'</span><span class="token punctuation">:</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入账号：'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">#用input函数填写账号和密码，这样代码更优雅，而不是直接把账号密码填上去。</span>    <span class="token string">'pwd'</span><span class="token punctuation">:</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入密码：'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'wp-submit'</span><span class="token punctuation">:</span><span class="token string">'登录'</span><span class="token punctuation">,</span>    <span class="token string">'redirect_to'</span><span class="token punctuation">:</span> <span class="token string">'https://xiaoke.kaikeba.com/example/wordpress/2019/10/17/%e5%bc%80%e8%af%be%e5%90%a7%e6%97%a0%e6%95%8c%e5%a5%bd%e5%90%83%e7%9a%84%e9%a3%9f%e5%a0%82%e4%b8%80%e5%91%a8%e8%8f%9c%e8%b0%b1/'</span><span class="token punctuation">,</span>    <span class="token string">'testcookie'</span><span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">&#125;</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url_login<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>data_login<span class="token punctuation">)</span><span class="token comment">#在创建的session下用post发起登录请求，放入参数：请求登录的网址、请求头和登录参数。</span>url_comment <span class="token operator">=</span> <span class="token string">'https://xiaoke.kaikeba.com/example/wordpress/wp-comments-post.php'</span><span class="token comment">#把我们想要评论的文章网址赋值给url_comment。</span>data_comment <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'comment'</span><span class="token punctuation">:</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入你想要发表的评论：'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'submit'</span><span class="token punctuation">:</span> <span class="token string">'发表评论'</span><span class="token punctuation">,</span>    <span class="token string">'comment_post_ID'</span><span class="token punctuation">:</span> <span class="token string">'35'</span><span class="token punctuation">,</span>    <span class="token string">'comment_parent'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">&#125;</span><span class="token comment">#把有关评论的参数封装成字典。</span>comment <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url_comment<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>data_comment<span class="token punctuation">)</span><span class="token comment">#在创建的session下用post发起评论请求，放入参数：文章网址，请求头和评论参数，并赋值给comment。</span><span class="token keyword">print</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span></code></pre><h4 id="cookie的存储"><a href="#cookie的存储" class="headerlink" title="cookie的存储"></a>cookie的存储</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jsonsession <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>cookie_dict <span class="token operator">=</span> requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>dict_from_cookiejar<span class="token punctuation">(</span>session<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token comment">#把cookie转化成字典。</span><span class="token keyword">print</span><span class="token punctuation">(</span>cookie_dict<span class="token punctuation">)</span>cookie_str <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>cookie_dict<span class="token punctuation">)</span><span class="token comment">#调用json模块的dumps函数，把cookie从字典再转成字符串。</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'cookie.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token comment">#创建名为cookie.txt的文件，以写入模式写入内容。</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>cookie_str<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>json: json.dumps—将python对象（字典…）编码为json字符串 json.loads—将编码的json字符串解码为python对象</p><p>requests.utils.dict_from_cookiejar—从cookiejar返回 键&#x2F;值 字典。<br>requests.utils.cookiejar_from_dict—-从字典返回cookiejar.</p><h4 id="cookie的读取"><a href="#cookie的读取" class="headerlink" title="cookie的读取"></a>cookie的读取</h4><pre class="language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'cookie.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>cookie_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cookie <span class="token operator">=</span> requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>cookiejar_from_dict<span class="token punctuation">(</span>cookie_dict<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cookie_dict<span class="token punctuation">)</span>session<span class="token punctuation">.</span>cookies<span class="token operator">=</span>cookief<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="终极武器——–selenuim"><a href="#终极武器——–selenuim" class="headerlink" title="终极武器——–selenuim"></a>终极武器——–selenuim</h3><p>selenium可以通过控制浏览器，做出自动打开、输入、点击等操作，就像是有一个真正的用户在操作一样</p><p>pip install selenium</p><p>安装浏览器驱动 这里使用chrome :</p><p>驱动网址： <a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a></p><p>浏览器地址栏输入 chrome:&#x2F;&#x2F;version查看浏览器版本等信息</p><p>根据版本下载合适的驱动，解压后得到Chromedriver.exe，放在python根目录</p><h4 id="本地Chrome浏览器设置方法"><a href="#本地Chrome浏览器设置方法" class="headerlink" title="本地Chrome浏览器设置方法"></a>本地Chrome浏览器设置方法</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">### selenium示例</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> timedriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">##启动chromedriver，打开浏览器</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://xiaoke.kaikeba.com/example/X-Man/'</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>teacher <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'teacher'</span><span class="token punctuation">)</span>teacher<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'开课吧'</span><span class="token punctuation">)</span>assistant <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span><span class="token string">'assist'</span><span class="token punctuation">)</span>assistant<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'全都喜欢'</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>button <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_tag_name<span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class="language-python" data-language="python"><code class="language-python">driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 设置引擎为Chrome，从本地打开一个Chrome浏览器</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://xiaoke.kaikeba.com/example/X-Man/'</span><span class="token punctuation">)</span> <span class="token comment"># 访问页面</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 等待3秒</span>label <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_tag_name<span class="token punctuation">(</span><span class="token string">'label'</span><span class="token punctuation">)</span> <span class="token comment"># 解析网页并提取第一个&lt;label>标签</span><span class="token keyword">print</span><span class="token punctuation">(</span>label<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token comment"># 打印label的文本</span>driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 关闭浏览器</span></code></pre><h4 id="Selenium用来提取数据的常用方法："><a href="#Selenium用来提取数据的常用方法：" class="headerlink" title="Selenium用来提取数据的常用方法："></a>Selenium用来提取数据的常用方法：</h4><p>find_element(s)_by_id —————————————-通过元素id进行选择——element加s表示取多个类似于BeautifulSoup中的find和find_all</p><p>find_element(s)_by_class_name ——————————–通过元素class进行选择</p><p>find_element(s)_by_tag_name ———————————-通过元素的标签名（tag）进行选择</p><p>find_element(s)_by_name ————————————–通过元素的name进行选择</p><p>find_element(s)_by_partial_link_text ————————-通过链接的部分文本来获取超链接</p><p>如 <code>&lt;a href=&quot;spidermen.html&quot;&gt;你好，X战警 &lt;/a&gt; </code> # 可以使用find_element_by_link_text(‘你好，X战警’) 提取出超链接，</p><p>find_element(s)_by_link_text ———————————通过链接的文本来获取超链接</p><pre class="language-python" data-language="python"><code class="language-python">driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 设置引擎为Chrome，从本地打开一个Chrome浏览器</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://xiaoke.kaikeba.com/example/X-Man/'</span><span class="token punctuation">)</span> <span class="token comment"># 访问页面</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 等待两秒</span>label <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'form-teacher'</span><span class="token punctuation">)</span> <span class="token comment"># 根据类名找到元素</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 打印label的数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>label<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 获取type这个属性的值</span>driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 关闭浏览器</span></code></pre><p>利用selenium爬取周杰伦《说好不哭》歌曲评论 <a href="https://y.qq.com/n/yqq/song/001qvvgF38HVc4.html">https://y.qq.com/n/yqq/song/001qvvgF38HVc4.html</a></p><p>selenium可以爬取网页渲染完成之后的源代码</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupdriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">##启动chromedriver，打开浏览器</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://y.qq.com/n/yqq/song/001qvvgF38HVc4.html'</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>html <span class="token operator">=</span> driver<span class="token punctuation">.</span>page_source<span class="token comment"># print(html)</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'html.parser'</span><span class="token punctuation">)</span>comment <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"comment__text"</span><span class="token punctuation">)</span><span class="token comment">#打印爬取下来的评论信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> comment<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>小tip：当爬取的网页出现乱码时，考虑可能是编码的问题，在查看网页源代码，搜索charset查看编码格式，然后使用response.encoding&#x3D;’编码’，设置一下编码就可以了</p><h3 id="gevent异步爬虫"><a href="#gevent异步爬虫" class="headerlink" title="gevent异步爬虫"></a>gevent异步爬虫</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> gevent <span class="token keyword">import</span> monkey<span class="token comment">#从gevent库里导入monkey模块。</span>monkey<span class="token punctuation">.</span>patch_all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#monkey.patch_all()能把程序变成协作式运行，就是可以帮助程序实现异步。</span><span class="token keyword">import</span> gevent<span class="token keyword">import</span> time<span class="token keyword">import</span> requests<span class="token comment">#导入gevent、time、requests。</span><span class="token triple-quoted-string string">'''    同步爬虫执行爬取任务时按顺序进行，会产生很多等待时间，    异步爬虫多任务同时执行（这里的同时执行代指--当一个爬虫进入等待时间，另一个爬虫进入cpu）,    所以在爬取大量数据时，异步爬虫所需要的时间比同步爬虫少。'''</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#记录程序开始时间。</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"异步爬虫"</span><span class="token punctuation">)</span>url_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.baidu.com/'</span><span class="token punctuation">,</span><span class="token string">'https://www.sina.com.cn/'</span><span class="token punctuation">,</span><span class="token string">'http://www.sohu.com/'</span><span class="token punctuation">,</span><span class="token string">'https://www.qq.com/'</span><span class="token punctuation">,</span><span class="token string">'https://www.163.com/'</span><span class="token punctuation">,</span><span class="token string">'http://www.iqiyi.com/'</span><span class="token punctuation">,</span><span class="token string">'https://www.tmall.com/'</span><span class="token punctuation">,</span><span class="token string">'http://www.ifeng.com/'</span><span class="token punctuation">]</span><span class="token comment">#把8个网站封装成列表。</span><span class="token keyword">def</span> <span class="token function">crawler</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#定义一个crawler()函数。</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment">#用requests.get()函数爬取网站。</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">,</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>    <span class="token comment">#打印网址、请求运行时间、状态码。</span>tasks_list <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token comment">#创建空的任务列表。</span><span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">:</span><span class="token comment">#遍历url_list。</span>    task <span class="token operator">=</span> gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>crawler<span class="token punctuation">,</span>url<span class="token punctuation">)</span>    <span class="token comment">#用gevent.spawn()函数创建任务。</span>    tasks_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>task<span class="token punctuation">)</span>    <span class="token comment">#往任务列表添加任务。</span>gevent<span class="token punctuation">.</span>joinall<span class="token punctuation">(</span>tasks_list<span class="token punctuation">)</span><span class="token comment">#执行任务列表里的所有任务，就是让爬虫开始爬取网站。</span>end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#记录程序结束时间。</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'异步爬虫时间：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>end<span class="token operator">-</span>start<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment">#打印程序最终所需时间。</span><span class="token comment">### 同步爬虫</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"同步爬虫"</span><span class="token punctuation">)</span><span class="token comment">#导入requests和time</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#记录程序开始时间</span><span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">:</span><span class="token comment">#遍历url_list</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>time_taken <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'同步爬虫时间：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>time_taken<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span></code></pre><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><h4 id="天气查询"><a href="#天气查询" class="headerlink" title="天气查询"></a>天气查询</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> os<span class="token keyword">import</span> re   <span class="token comment">### 正则表达式</span><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token comment"># url = 'http://www.weather.com.cn/'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---城市天气查询系统---"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"（目前只支持查询县（区）级以上城市天气）"</span><span class="token punctuation">)</span>city <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入查询地址："</span><span class="token punctuation">)</span>city<span class="token operator">=</span>city<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'省'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'市'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'县'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'区'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'http://toy1.weather.com.cn/search?cityname='</span><span class="token operator">+</span>city<span class="token operator">+</span><span class="token string">'&amp;callback=success_jsonpCallback&amp;_=1635127411542'</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36'</span><span class="token punctuation">&#125;</span>res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>res<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token comment"># print(type(res.text))</span><span class="token comment"># print(res.text)</span>nums <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"\d+\.?\d*"</span><span class="token punctuation">,</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment"># 正则表达式</span>city_num <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># print(city_num)</span>city_url <span class="token operator">=</span> <span class="token string">'http://www.weather.com.cn/weather/'</span><span class="token operator">+</span>city_num<span class="token operator">+</span><span class="token string">'.shtml'</span>city_html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>city_url<span class="token punctuation">)</span>city_html<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>city_html<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>weather_htmls <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'t clearfix'</span><span class="token punctuation">)</span>weathea_lis <span class="token operator">=</span> weather_htmls<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>city_name <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'crumbs fl'</span><span class="token punctuation">)</span>city_name <span class="token operator">=</span> <span class="token punctuation">(</span>city_name<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>  <span class="token comment">### 字符串过滤，过滤空格和换行符</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'\n地区：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>city_name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>  <span class="token comment"># 城市名字</span><span class="token keyword">for</span> weather_html <span class="token keyword">in</span> weathea_lis<span class="token punctuation">:</span>    data_time <span class="token operator">=</span> weather_html<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text  <span class="token comment"># 日期</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'时间：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>data_time<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    data_weather <span class="token operator">=</span> weather_html<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'wea'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text  <span class="token comment"># 天气</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'天气：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>data_weather<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    data_tem <span class="token operator">=</span> weather_html<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'tem'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text  <span class="token comment"># 温度</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'温度：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>data_tem<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token format-spec">8]</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span></code></pre><h4 id="定时爬取中国气象网的数据，使用邮件发送到邮箱。"><a href="#定时爬取中国气象网的数据，使用邮件发送到邮箱。" class="headerlink" title="定时爬取中国气象网的数据，使用邮件发送到邮箱。"></a>定时爬取中国气象网的数据，使用邮件发送到邮箱。</h4><p>这里发送邮件会用到几个python库—–smtplib和email(这两个是python内置库，不需要使用pip安装)</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> smtplib<span class="token keyword">from</span> email<span class="token punctuation">.</span>header <span class="token keyword">import</span> Header<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token keyword">import</span> schedule <span class="token comment">## 定时操作模块</span><span class="token keyword">def</span> <span class="token function">weather_send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">## 天气的爬取，这里我们从中国气象网爬取数据</span>    <span class="token comment">## 网址： http://www.weather.com.cn/</span>    <span class="token keyword">global</span> city_name<span class="token punctuation">,</span> data_time<span class="token punctuation">,</span> data_weather<span class="token punctuation">,</span> data_tem  <span class="token comment">## 定义全局变量</span>    url <span class="token operator">=</span> <span class="token string">"http://www.weather.com.cn/weather/101260103.shtml"</span>  <span class="token comment">## 爬取的是花溪区的数据</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    res<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>    weather_htmls <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'t clearfix'</span><span class="token punctuation">)</span>    weathea_lis <span class="token operator">=</span> weather_htmls<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> weather_html <span class="token keyword">in</span> weathea_lis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        city_name <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'crumbs fl'</span><span class="token punctuation">)</span>        city_name <span class="token operator">=</span> <span class="token punctuation">(</span>city_name<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>  <span class="token comment">### 字符串过滤，过滤空格和换行符</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'地区：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>city_name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>  <span class="token comment"># 城市名字</span>        data_time <span class="token operator">=</span> weather_html<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text  <span class="token comment"># 日期</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'时间：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>data_time<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>        data_weather <span class="token operator">=</span> weather_html<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'wea'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text  <span class="token comment"># 天气</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'天气：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>data_weather<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>        data_tem <span class="token operator">=</span> weather_html<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'tem'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text  <span class="token comment"># 温度</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'温度：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>data_tem<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token format-spec">8]</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    emailhost <span class="token operator">=</span> <span class="token string">'smtp.qq.com'</span>    email <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 实例化smtp（）对象</span>    email<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>emailhost<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>  <span class="token comment">## 连接smtp服务器</span>    my_qqemail <span class="token operator">=</span> <span class="token string">'这里是发件邮箱'</span>    my_qqemail_pwd <span class="token operator">=</span> <span class="token string">'邮箱密码'</span> <span class="token comment">##这里的密码是在邮箱设置里面开启smtp服务的密码，并非邮箱密码</span>    email<span class="token punctuation">.</span>login<span class="token punctuation">(</span>my_qqemail<span class="token punctuation">,</span> my_qqemail_pwd<span class="token punctuation">)</span>  <span class="token comment"># 登录邮件客户端</span>    <span class="token comment"># recipient = '要发送的邮箱'</span>    recipient <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入收件人邮箱地址："</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> <span class="token string">'你好，这里是燚向你推送的明天天气：'</span> <span class="token operator">+</span>\              <span class="token string">'\n'</span> <span class="token operator">+</span><span class="token string">'地区：'</span><span class="token operator">+</span>city_name <span class="token operator">+</span> <span class="token string">'\n'</span>\              <span class="token operator">+</span><span class="token string">'时间：'</span><span class="token operator">+</span> data_time <span class="token operator">+</span> <span class="token string">'\n'</span> \              <span class="token operator">+</span> <span class="token string">'天气：'</span> <span class="token operator">+</span> data_weather <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> \              <span class="token string">'温度：'</span> <span class="token operator">+</span> data_tem<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span> \              <span class="token string">'天气冷了，记得多穿衣服，注意保暖！！'</span>    message <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">'plain'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    subject <span class="token operator">=</span> <span class="token string">"燚 —— 天气预报(测试版)"</span>    message<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        email<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>my_qqemail<span class="token punctuation">,</span>recipient<span class="token punctuation">,</span>message<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"发送成功"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> EnvironmentError <span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"发送失败"</span><span class="token punctuation">)</span>    email<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># if __name__ == '__main__':</span><span class="token comment">#     weather_send()</span><span class="token comment"># 定时发送</span><span class="token comment"># schedule.every().day.at("20:56").do(weather_send)   # 每天定时发送</span>schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span>seconds<span class="token punctuation">.</span>do<span class="token punctuation">(</span>weather_send<span class="token punctuation">)</span>   <span class="token comment">## 每30秒发送</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    schedule<span class="token punctuation">.</span>run_pending<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><h4 id="表情包爬取"><a href="#表情包爬取" class="headerlink" title="表情包爬取"></a>表情包爬取</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token comment"># 爬取表情包 , 存放到tworequest_tupian文件夹 请先在本地创建一个空文件夹</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://www.bbsnet.com/egao"</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    html <span class="token operator">=</span> res<span class="token punctuation">.</span>text             <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>    imgs <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"zoom"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> img <span class="token keyword">in</span> imgs<span class="token punctuation">:</span>        picture <span class="token operator">=</span> img<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span>        pics <span class="token operator">=</span> picture<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'下载来自</span><span class="token interpolation"><span class="token punctuation">&#123;</span>pics<span class="token punctuation">&#125;</span></span><span class="token string">的图片'</span></span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">"-------------------"</span><span class="token punctuation">)</span>        pic <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pics<span class="token punctuation">)</span>        x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        imgname <span class="token operator">=</span> <span class="token string">"tworequest_tupian/image_egao"</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">".gif"</span>        p <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>imgname<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>write<span class="token punctuation">(</span>pic<span class="token punctuation">.</span>content<span class="token punctuation">)</span>        p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载成功"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取完成"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium </tag>
            
            <tag> requests </tag>
            
            <tag> BeautifulSoup </tag>
            
            <tag> cookie </tag>
            
            <tag> session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo的博客搭建记录</title>
      <link href="/2022/05/14/myFirstBlog/"/>
      <url>/2022/05/14/myFirstBlog/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文将使用基于node.js的一个快速、简介且高效的博客框架————hexo，完成一个博客网站的搭建，由于hexo是建立在node之上，建议先在本地完成node.js环境的配置。</p><h5 id="相关链接："><a href="#相关链接：" class="headerlink" title="相关链接："></a>相关链接：</h5><p>hexo官方文档：<a href="https://hexo.bootcss.com/docs/">https://hexo.bootcss.com/docs/</a></p><p>hexo主题配置： <a href="https://easyhexo.com/2-Theme-use-and-config/">https://easyhexo.com/2-Theme-use-and-config/</a></p><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="一，项目初始化"><a href="#一，项目初始化" class="headerlink" title="一，项目初始化"></a>一，项目初始化</h3><p>1、使用npm下载hexo</p><pre class="language-none"><code class="language-none">npm install -g hexo-cli</code></pre><p>2、创建一个项目文件夹(目录随意)，名称随意，我这里以hexo为例</p><pre class="language-none"><code class="language-none">mkdir hexo &#x2F;&#x2F; 创建一个名为hexo的文件夹cd hexo &#x2F;&#x2F;进入hexo目录下hexo init &#x2F;&#x2F;初始化，等待下载完成</code></pre><p><img src="/2022/05/14/myFirstBlog/image-20220515140323539.png" alt="image-20220515140323539"></p><p>当看到这样的字样则表示项目初始化成功！！！</p><p>3、将项目运行起来，使用控制台进入当前目录，win+r，输入cmd，然后cd 到当前目录即可，不过在windows下需要注意的是，如果要切换到其他盘，如D ,E盘，则需要先输入d: 或 e:  。</p><pre class="language-none"><code class="language-none">npm install &#x2F;&#x2F;首先导入相关的依赖hexo g  hexo s</code></pre><p>此时可以看到<img src="/2022/05/14/myFirstBlog/hexo-s.png" alt="hexo-s"></p><p>在浏览器输入localhost:4000即可打开博客页面，如下图所示</p><p><img src="/2022/05/14/myFirstBlog/image.png" alt="hexo-s"></p><p>这样，博客搭建的第一步就完成了，顺便介绍一下hexo常用的几个命令</p><ul><li>hexo clean清空当前编译好的静态文件以及缓存文件，可以理解为将博客网页清空</li><li>hexo generate  生成静态文件，也就是生成博客页面 ，可以简写为 hexo g</li><li>hexo server       从本地服务器打开博客，可以简写为hexo s</li><li>hexo deploy      将博客进行部署，这个暂时不进行描述</li><li>hexo new page pagename 新建一个页面</li><li>hexo new blogname    新建一篇博客，也就是创建一个markdown文件，存放在项目根目录下的source&#x2F;_posts下</li></ul><p>然后看一下项目的基本目录结构</p><pre class="language-none"><code class="language-none">node_module   --项目依赖文件夹public        --生成的静态网页目录themes        --主题文件夹，下载的主题放到这里面source        --与我们接触最多的一个文件夹，里面放着各种页面，文章和图片-_posts   --写的博客就放在这里面_config.yml   --项目配置文件</code></pre><br/><h3 id="二，博客界面美化"><a href="#二，博客界面美化" class="headerlink" title="二，博客界面美化"></a>二，博客界面美化</h3><p>hexo官网给我们提供了很多免费的主题，<a href='https://hexo.bootcss.com/themes/'>传送门</a>，可以在这里寻找自己喜欢的主题，用git克隆到themes目录后，在_config.yml配置文件进行切换，如图</p><p><img src="/2022/05/14/myFirstBlog/themes.png" alt="themes"></p><p>这里我使用的是matery主题，是把他克隆到项目根目录下的themes主题目录下</p><pre class="language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;blinkfox&#x2F;hexo-theme-matery.git themes&#x2F;hexo-theme-matery</code></pre><p>然后根据上图修改配置文件即可，修改完成后记得重新生成静态文件hexo g，然后重新运行hexo s</p><p>查看效果</p><p><img src="/2022/05/14/myFirstBlog/myblog.png" alt="myblog"></p><p>关于博客主题的相关配置，在themes下的hexo-theme-matery下有一个_config.yml的配置文件，里面都有注释，可以进行相关功能的添加</p><p>关于标签、分类、关于等界面点击后没有页面的情况，我们查看hexo-theme-matery文档</p><p><a href="https://easyhexo.com/2-Theme-use-and-config/2-14-hexo-theme-matery/">https://easyhexo.com/2-Theme-use-and-config/2-14-hexo-theme-matery/</a></p><p><img src="/2022/05/14/myFirstBlog/image-20220515224748462.png" alt="image-20220515224748462"></p><p>根据官方文档进行相关界面的配置即可，这里以categories为例</p><pre class="language-none"><code class="language-none">hexo new page &quot;categories&quot;</code></pre><p>然后在source目录下找到categories&#x2F;index.md，修改如下，即可，</p><pre class="language-none"><code class="language-none">---title: categoriesdate: 2018-09-30 17:25:30  &#x2F;&#x2F;时间可不做修改type: &quot;categories&quot;layout: &quot;categories&quot;---</code></pre><p>其他页面也是一样的方法，配置完成后重新打包静态文件，hexo g然后运行就可以了</p><h2 id="加载速度优化"><a href="#加载速度优化" class="headerlink" title="加载速度优化"></a>加载速度优化</h2><p>在使用过程中发现，有时候会出现加载缓慢的问题，我们打开控制台，点击网络，这时候发现一个名叫typed.js的文件请求失败了，怀疑是这个文件一直请求不成功，导致网页一直阻塞在加载状态。</p><p><img src="/2022/05/14/myFirstBlog/image-20220517171949910.png" alt="image-20220517171949910"></p><p>这是一个用来实现首页打字效果的js插件，我们在主题目录下（也就是hexo-theme-matery文件夹下）的layout\_partial下找到一个bg-cover-content.ejs的文件，打开可看到这里是使用的cdn引入</p><p><img src="/2022/05/14/myFirstBlog/image-20220517172408357.png" alt="image-20220517172408357"></p><p>我们可以直接把这个文件下载到本地，这样就不用每次都需要从网上去下载资源，，尤其在网络比较慢的情况下，会让博客的加载一直处于阻塞状态。</p><p>找不到下载地址的小伙伴可以使用我这个地址</p><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;zhaojiuyi.github.io&#x2F;medias&#x2F;js&#x2F;typed.min.js</code></pre><p>打开后是这样的一个网页</p><p><img src="/2022/05/14/myFirstBlog/image-20220518115528520.png" alt="image-20220518115528520"></p><p>全部选中后在主题目录hexo-theme-matery下的source\js下创建一个type-min.js文件，将内容粘贴进去，然后保存，最后在hexo-theme-matery\layout\_partial下的bg-cover-content.ejs下导入js文件</p><pre class="language-none"><code class="language-none">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;typed.min.js&quot;&gt;&lt;&#x2F;script&gt;</code></pre><p><img src="/2022/05/14/myFirstBlog/image-20220518120012775.png" alt="image-20220518120012775"></p><p>图片中删除的部分路径可能不太一样，只用看最后都是type.js或者type.min.js就可以了</p><p>现在重新打包静态文件，可以看到博客启动速度变快了。</p><h2 id="来个开箱即用"><a href="#来个开箱即用" class="headerlink" title="来个开箱即用"></a>来个开箱即用</h2><p>使用如下命令，直接克隆博主搭建好的博客到本地</p><pre class="language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;zhaojiuyi&#x2F;hexo-matery.git</code></pre><p>使用hexo g生成静态文件，然后hexo s运行后在浏览器输入localhost:4000打开，功能虽然不多，也还能满足基本需求。关于部署的问题网上教程很多，暂时先不做叙述了。</p><pre class="language-none"><code class="language-none">npm installhexo cleanhexo ghexo s</code></pre><p>最后推荐几篇博客</p><p>hexo+github博客搭建和部署，个人认为十分详细：,<a href="https://blog.csdn.net/qq_58608526/article/details/124652412">https://blog.csdn.net/qq_58608526/article/details/124652412</a></p><p>页面加载动画：<a href="https://blog.csdn.net/weixin_43662760/article/details/122311217">https://blog.csdn.net/weixin_43662760/article/details/122311217</a></p><p>网页昼夜切换的效果：<a href="https://dreamruins.gitee.io/tutorials/1121281946.html#vcomments">https://dreamruins.gitee.io/tutorials/1121281946.html#vcomments</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/10/hello-world/"/>
      <url>/2022/05/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 说明 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
